<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\debug\hc32f460jeta.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\debug\hc32f460jeta.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Sun Mar  9 14:40:12 2025
<BR><P>
<H3>Maximum Stack Usage =        200 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; BSP_CLK_Init &rArr; CLK_PLLInit &rArr; CLK_PLLCmd
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a3]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[8a]">IRQ128_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8a]">IRQ128_Handler</a><BR>
 <LI><a href="#[a5]">DDL_AssertHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a5]">DDL_AssertHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a]">IRQ000_Handler</a> from hc32_ll_interrupts.o(.text.IRQ000_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[b]">IRQ001_Handler</a> from hc32_ll_interrupts.o(.text.IRQ001_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[c]">IRQ002_Handler</a> from hc32_ll_interrupts.o(.text.IRQ002_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[d]">IRQ003_Handler</a> from hc32_ll_interrupts.o(.text.IRQ003_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[e]">IRQ004_Handler</a> from hc32_ll_interrupts.o(.text.IRQ004_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[f]">IRQ005_Handler</a> from hc32_ll_interrupts.o(.text.IRQ005_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[10]">IRQ006_Handler</a> from hc32_ll_interrupts.o(.text.IRQ006_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[11]">IRQ007_Handler</a> from hc32_ll_interrupts.o(.text.IRQ007_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[12]">IRQ008_Handler</a> from hc32_ll_interrupts.o(.text.IRQ008_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[13]">IRQ009_Handler</a> from hc32_ll_interrupts.o(.text.IRQ009_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[14]">IRQ010_Handler</a> from hc32_ll_interrupts.o(.text.IRQ010_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[15]">IRQ011_Handler</a> from hc32_ll_interrupts.o(.text.IRQ011_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[16]">IRQ012_Handler</a> from hc32_ll_interrupts.o(.text.IRQ012_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[17]">IRQ013_Handler</a> from hc32_ll_interrupts.o(.text.IRQ013_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[18]">IRQ014_Handler</a> from hc32_ll_interrupts.o(.text.IRQ014_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[19]">IRQ015_Handler</a> from hc32_ll_interrupts.o(.text.IRQ015_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1a]">IRQ016_Handler</a> from hc32_ll_interrupts.o(.text.IRQ016_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1b]">IRQ017_Handler</a> from hc32_ll_interrupts.o(.text.IRQ017_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1c]">IRQ018_Handler</a> from hc32_ll_interrupts.o(.text.IRQ018_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1d]">IRQ019_Handler</a> from hc32_ll_interrupts.o(.text.IRQ019_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1e]">IRQ020_Handler</a> from hc32_ll_interrupts.o(.text.IRQ020_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1f]">IRQ021_Handler</a> from hc32_ll_interrupts.o(.text.IRQ021_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[20]">IRQ022_Handler</a> from hc32_ll_interrupts.o(.text.IRQ022_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[21]">IRQ023_Handler</a> from hc32_ll_interrupts.o(.text.IRQ023_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[22]">IRQ024_Handler</a> from hc32_ll_interrupts.o(.text.IRQ024_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[23]">IRQ025_Handler</a> from hc32_ll_interrupts.o(.text.IRQ025_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[24]">IRQ026_Handler</a> from hc32_ll_interrupts.o(.text.IRQ026_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[25]">IRQ027_Handler</a> from hc32_ll_interrupts.o(.text.IRQ027_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[26]">IRQ028_Handler</a> from hc32_ll_interrupts.o(.text.IRQ028_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[27]">IRQ029_Handler</a> from hc32_ll_interrupts.o(.text.IRQ029_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[28]">IRQ030_Handler</a> from hc32_ll_interrupts.o(.text.IRQ030_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[29]">IRQ031_Handler</a> from hc32_ll_interrupts.o(.text.IRQ031_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2a]">IRQ032_Handler</a> from hc32_ll_interrupts.o(.text.IRQ032_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2b]">IRQ033_Handler</a> from hc32_ll_interrupts.o(.text.IRQ033_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2c]">IRQ034_Handler</a> from hc32_ll_interrupts.o(.text.IRQ034_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2d]">IRQ035_Handler</a> from hc32_ll_interrupts.o(.text.IRQ035_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2e]">IRQ036_Handler</a> from hc32_ll_interrupts.o(.text.IRQ036_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2f]">IRQ037_Handler</a> from hc32_ll_interrupts.o(.text.IRQ037_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[30]">IRQ038_Handler</a> from hc32_ll_interrupts.o(.text.IRQ038_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[31]">IRQ039_Handler</a> from hc32_ll_interrupts.o(.text.IRQ039_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[32]">IRQ040_Handler</a> from hc32_ll_interrupts.o(.text.IRQ040_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[33]">IRQ041_Handler</a> from hc32_ll_interrupts.o(.text.IRQ041_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[34]">IRQ042_Handler</a> from hc32_ll_interrupts.o(.text.IRQ042_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[35]">IRQ043_Handler</a> from hc32_ll_interrupts.o(.text.IRQ043_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[36]">IRQ044_Handler</a> from hc32_ll_interrupts.o(.text.IRQ044_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[37]">IRQ045_Handler</a> from hc32_ll_interrupts.o(.text.IRQ045_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[38]">IRQ046_Handler</a> from hc32_ll_interrupts.o(.text.IRQ046_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[39]">IRQ047_Handler</a> from hc32_ll_interrupts.o(.text.IRQ047_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3a]">IRQ048_Handler</a> from hc32_ll_interrupts.o(.text.IRQ048_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3b]">IRQ049_Handler</a> from hc32_ll_interrupts.o(.text.IRQ049_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3c]">IRQ050_Handler</a> from hc32_ll_interrupts.o(.text.IRQ050_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3d]">IRQ051_Handler</a> from hc32_ll_interrupts.o(.text.IRQ051_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3e]">IRQ052_Handler</a> from hc32_ll_interrupts.o(.text.IRQ052_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3f]">IRQ053_Handler</a> from hc32_ll_interrupts.o(.text.IRQ053_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[40]">IRQ054_Handler</a> from hc32_ll_interrupts.o(.text.IRQ054_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[41]">IRQ055_Handler</a> from hc32_ll_interrupts.o(.text.IRQ055_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[42]">IRQ056_Handler</a> from hc32_ll_interrupts.o(.text.IRQ056_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[43]">IRQ057_Handler</a> from hc32_ll_interrupts.o(.text.IRQ057_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[44]">IRQ058_Handler</a> from hc32_ll_interrupts.o(.text.IRQ058_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[45]">IRQ059_Handler</a> from hc32_ll_interrupts.o(.text.IRQ059_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[46]">IRQ060_Handler</a> from hc32_ll_interrupts.o(.text.IRQ060_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[47]">IRQ061_Handler</a> from hc32_ll_interrupts.o(.text.IRQ061_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[48]">IRQ062_Handler</a> from hc32_ll_interrupts.o(.text.IRQ062_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[49]">IRQ063_Handler</a> from hc32_ll_interrupts.o(.text.IRQ063_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4a]">IRQ064_Handler</a> from hc32_ll_interrupts.o(.text.IRQ064_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4b]">IRQ065_Handler</a> from hc32_ll_interrupts.o(.text.IRQ065_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4c]">IRQ066_Handler</a> from hc32_ll_interrupts.o(.text.IRQ066_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4d]">IRQ067_Handler</a> from hc32_ll_interrupts.o(.text.IRQ067_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4e]">IRQ068_Handler</a> from hc32_ll_interrupts.o(.text.IRQ068_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4f]">IRQ069_Handler</a> from hc32_ll_interrupts.o(.text.IRQ069_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[50]">IRQ070_Handler</a> from hc32_ll_interrupts.o(.text.IRQ070_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[51]">IRQ071_Handler</a> from hc32_ll_interrupts.o(.text.IRQ071_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[52]">IRQ072_Handler</a> from hc32_ll_interrupts.o(.text.IRQ072_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[53]">IRQ073_Handler</a> from hc32_ll_interrupts.o(.text.IRQ073_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[54]">IRQ074_Handler</a> from hc32_ll_interrupts.o(.text.IRQ074_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[55]">IRQ075_Handler</a> from hc32_ll_interrupts.o(.text.IRQ075_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[56]">IRQ076_Handler</a> from hc32_ll_interrupts.o(.text.IRQ076_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[57]">IRQ077_Handler</a> from hc32_ll_interrupts.o(.text.IRQ077_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[58]">IRQ078_Handler</a> from hc32_ll_interrupts.o(.text.IRQ078_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[59]">IRQ079_Handler</a> from hc32_ll_interrupts.o(.text.IRQ079_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5a]">IRQ080_Handler</a> from hc32_ll_interrupts.o(.text.IRQ080_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5b]">IRQ081_Handler</a> from hc32_ll_interrupts.o(.text.IRQ081_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5c]">IRQ082_Handler</a> from hc32_ll_interrupts.o(.text.IRQ082_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5d]">IRQ083_Handler</a> from hc32_ll_interrupts.o(.text.IRQ083_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5e]">IRQ084_Handler</a> from hc32_ll_interrupts.o(.text.IRQ084_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5f]">IRQ085_Handler</a> from hc32_ll_interrupts.o(.text.IRQ085_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[60]">IRQ086_Handler</a> from hc32_ll_interrupts.o(.text.IRQ086_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[61]">IRQ087_Handler</a> from hc32_ll_interrupts.o(.text.IRQ087_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[62]">IRQ088_Handler</a> from hc32_ll_interrupts.o(.text.IRQ088_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[63]">IRQ089_Handler</a> from hc32_ll_interrupts.o(.text.IRQ089_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[64]">IRQ090_Handler</a> from hc32_ll_interrupts.o(.text.IRQ090_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[65]">IRQ091_Handler</a> from hc32_ll_interrupts.o(.text.IRQ091_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[66]">IRQ092_Handler</a> from hc32_ll_interrupts.o(.text.IRQ092_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[67]">IRQ093_Handler</a> from hc32_ll_interrupts.o(.text.IRQ093_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[68]">IRQ094_Handler</a> from hc32_ll_interrupts.o(.text.IRQ094_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[69]">IRQ095_Handler</a> from hc32_ll_interrupts.o(.text.IRQ095_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6a]">IRQ096_Handler</a> from hc32_ll_interrupts.o(.text.IRQ096_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6b]">IRQ097_Handler</a> from hc32_ll_interrupts.o(.text.IRQ097_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6c]">IRQ098_Handler</a> from hc32_ll_interrupts.o(.text.IRQ098_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6d]">IRQ099_Handler</a> from hc32_ll_interrupts.o(.text.IRQ099_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6e]">IRQ100_Handler</a> from hc32_ll_interrupts.o(.text.IRQ100_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6f]">IRQ101_Handler</a> from hc32_ll_interrupts.o(.text.IRQ101_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[70]">IRQ102_Handler</a> from hc32_ll_interrupts.o(.text.IRQ102_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[71]">IRQ103_Handler</a> from hc32_ll_interrupts.o(.text.IRQ103_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[72]">IRQ104_Handler</a> from hc32_ll_interrupts.o(.text.IRQ104_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[73]">IRQ105_Handler</a> from hc32_ll_interrupts.o(.text.IRQ105_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[74]">IRQ106_Handler</a> from hc32_ll_interrupts.o(.text.IRQ106_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[75]">IRQ107_Handler</a> from hc32_ll_interrupts.o(.text.IRQ107_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[76]">IRQ108_Handler</a> from hc32_ll_interrupts.o(.text.IRQ108_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[77]">IRQ109_Handler</a> from hc32_ll_interrupts.o(.text.IRQ109_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[78]">IRQ110_Handler</a> from hc32_ll_interrupts.o(.text.IRQ110_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[79]">IRQ111_Handler</a> from hc32_ll_interrupts.o(.text.IRQ111_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7a]">IRQ112_Handler</a> from hc32_ll_interrupts.o(.text.IRQ112_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7b]">IRQ113_Handler</a> from hc32_ll_interrupts.o(.text.IRQ113_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7c]">IRQ114_Handler</a> from hc32_ll_interrupts.o(.text.IRQ114_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7d]">IRQ115_Handler</a> from hc32_ll_interrupts.o(.text.IRQ115_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7e]">IRQ116_Handler</a> from hc32_ll_interrupts.o(.text.IRQ116_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7f]">IRQ117_Handler</a> from hc32_ll_interrupts.o(.text.IRQ117_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[80]">IRQ118_Handler</a> from hc32_ll_interrupts.o(.text.IRQ118_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[81]">IRQ119_Handler</a> from hc32_ll_interrupts.o(.text.IRQ119_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[82]">IRQ120_Handler</a> from hc32_ll_interrupts.o(.text.IRQ120_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[83]">IRQ121_Handler</a> from hc32_ll_interrupts.o(.text.IRQ121_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[84]">IRQ122_Handler</a> from hc32_ll_interrupts.o(.text.IRQ122_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[85]">IRQ123_Handler</a> from hc32_ll_interrupts.o(.text.IRQ123_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[86]">IRQ124_Handler</a> from hc32_ll_interrupts.o(.text.IRQ124_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[87]">IRQ125_Handler</a> from hc32_ll_interrupts.o(.text.IRQ125_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[88]">IRQ126_Handler</a> from hc32_ll_interrupts.o(.text.IRQ126_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[89]">IRQ127_Handler</a> from hc32_ll_interrupts.o(.text.IRQ127_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8a]">IRQ128_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8b]">IRQ129_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8c]">IRQ130_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8d]">IRQ131_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8e]">IRQ132_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8f]">IRQ133_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[90]">IRQ134_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[91]">IRQ135_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[92]">IRQ136_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[93]">IRQ137_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[94]">IRQ138_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[95]">IRQ139_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[96]">IRQ140_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[97]">IRQ141_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[98]">IRQ142_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[99]">IRQ143_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from hc32_ll_utility.o(.text.SysTick_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9a]">SystemInit</a> from system_hc32f460.o(.text.SystemInit) referenced from startup_hc32f460.o(.text)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a0]">_GLOBAL__sub_I_main.cpp</a> from main.o(.text._GLOBAL__sub_I_main.cpp) referenced from main.o(.init_array)
 <LI><a href="#[9d]">DMA_TransCompleteCallback()</a> from main.o(.text._ZL25DMA_TransCompleteCallbackv) referenced 2 times from main.o(.text.main)
 <LI><a href="#[9f]">dmaSend()</a> from main.o(.text._ZL7dmaSendv) referenced 2 times from main.o(.text.main)
 <LI><a href="#[9e]">led_blink()</a> from main.o(.text._ZL9led_blinkv) referenced 2 times from main.o(.text.main)
 <LI><a href="#[9c]">MillisTaskManager::~MillisTaskManager()</a> from millistaskmanager.o(.text._ZN17MillisTaskManagerD2Ev) referenced 2 times from main.o(.text._GLOBAL__sub_I_main.cpp)
 <LI><a href="#[a2]">std::terminate()</a> from cxa_handlers.cpp.o(.text._ZSt9terminatev) referenced from cxa_default_handlers.cpp.o(.data.__cxa_unexpected_handler)
 <LI><a href="#[9b]">__main</a> from __main.o(!!!main) referenced from startup_hc32f460.o(.text)
 <LI><a href="#[a1]">abort</a> from abort.o(.text) referenced from cxa_default_handlers.cpp.o(.data.__cxa_terminate_handler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[a9]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[10a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[10b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[aa]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[10c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[b5]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ab]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_fp_1 &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[ad]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[10d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[110]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[111]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[af]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[112]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[113]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[114]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[115]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[116]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[117]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[118]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[119]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[120]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[ba]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b0]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[121]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[122]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[123]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[124]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[125]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[126]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[127]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[a8]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[128]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b2]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b4]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[129]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b6]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; BSP_CLK_Init &rArr; CLK_PLLInit &rArr; CLK_PLLCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[12a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[cc]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b9]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[12b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[bb]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>IRQ128_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>IRQ129_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>IRQ130_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>IRQ131_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>IRQ132_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>IRQ133_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>IRQ134_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>IRQ135_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>IRQ136_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>IRQ137_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>IRQ138_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>IRQ139_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>IRQ140_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>IRQ141_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>IRQ142_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>IRQ143_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_hc32f460.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[bd]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[12c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[109]"></a>__rt_fp_status_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[bc]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[12f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[130]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaSend()
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>

<P><STRONG><a name="[c2]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[a1]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_default_handlers.cpp.o(.data.__cxa_terminate_handler)
</UL>
<P><STRONG><a name="[be]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[c0]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[c4]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[134]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[c6]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ae]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[c8]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[138]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[c3]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[139]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[c5]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[13c]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ca]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[c9]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[c7]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[cd]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[ce]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[cf]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[d0]"></a>AOS_SetTriggerEventSrc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hc32_ll_aos.o(.text.AOS_SetTriggerEventSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AOS_SetTriggerEventSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>BSP_CLK_Init</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, ev_hc32f460_lqfp100_v2.o(.text.BSP_CLK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_CLK_Init &rArr; CLK_PLLInit &rArr; CLK_PLLCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetWaitCycle
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_HighSpeedToHighPerformance
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetReadWaitCycle
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AnalogCmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetWaitCycle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_CacheRamReset
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_CacheCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalStructInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClockSrc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLStructInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetStableStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>BSP_KEY_KEY10_IrqHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ev_hc32f460_lqfp100_v2.o(.text.BSP_KEY_KEY10_IrqHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_KEY_KEY10_IrqHandler &rArr; GPIO_ReadInputPins
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_ClearExtIntStatus
</UL>

<P><STRONG><a name="[e2]"></a>BSP_LED_Init</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ev_hc32f460_lqfp100_v2.o(.text.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>BSP_LED_Off</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ev_hc32f460_lqfp100_v2.o(.text.BSP_LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_LED_Off &rArr; GPIO_ResetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink()
</UL>

<P><STRONG><a name="[e7]"></a>BSP_LED_On</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ev_hc32f460_lqfp100_v2.o(.text.BSP_LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_LED_On &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink()
</UL>

<P><STRONG><a name="[d8]"></a>CLK_GetStableStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hc32_ll_clk.o(.text.CLK_GetStableStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[e9]"></a>CLK_PLLCmd</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, hc32_ll_clk.o(.text.CLK_PLLCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_PLLCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLInit
</UL>

<P><STRONG><a name="[d7]"></a>CLK_PLLInit</STRONG> (Thumb, 614 bytes, Stack size 24 bytes, hc32_ll_clk.o(.text.CLK_PLLInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_PLLInit &rArr; CLK_PLLCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLCmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[d4]"></a>CLK_PLLStructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hc32_ll_clk.o(.text.CLK_PLLStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[d5]"></a>CLK_SetClockDiv</STRONG> (Thumb, 504 bytes, Stack size 40 bytes, hc32_ll_clk.o(.text.CLK_SetClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_SetClockDiv &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[dd]"></a>CLK_SetSysClockSrc</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, hc32_ll_clk.o(.text.CLK_SetSysClockSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_SetSysClockSrc &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[d6]"></a>CLK_XtalInit</STRONG> (Thumb, 442 bytes, Stack size 24 bytes, hc32_ll_clk.o(.text.CLK_XtalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_XtalInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[d3]"></a>CLK_XtalStructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hc32_ll_clk.o(.text.CLK_XtalStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[a5]"></a>DDL_AssertHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hc32_ll_utility.o(.text.DDL_AssertHandler))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLCmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetWaitCycle
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_HighSpeedToHighPerformance
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetReadWaitCycle
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AnalogCmd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_ClearExtIntStatus
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetWaitCycle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_CacheRamReset
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_CacheCmd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClockSrc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetStableStatus
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg1PeriphClockCmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg0PeriphClockCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTransCount
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetSrcAddr
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetDestAddr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearTransCompleteStatus
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AOS_SetTriggerEventSrc
</UL>

<P><STRONG><a name="[ed]"></a>DMA_ChCmd</STRONG> (Thumb, 470 bytes, Stack size 24 bytes, hc32_ll_dma.o(.text.DMA_ChCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_ChCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaSend()
</UL>

<P><STRONG><a name="[ee]"></a>DMA_ClearTransCompleteStatus</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hc32_ll_dma.o(.text.DMA_ClearTransCompleteStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_ClearTransCompleteStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TransCompleteCallback()
</UL>

<P><STRONG><a name="[ef]"></a>DMA_Cmd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hc32_ll_dma.o(.text.DMA_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>DMA_Init</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, hc32_ll_dma.o(.text.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>DMA_SetDestAddr</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, hc32_ll_dma.o(.text.DMA_SetDestAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_SetDestAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaSend()
</UL>

<P><STRONG><a name="[f2]"></a>DMA_SetSrcAddr</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, hc32_ll_dma.o(.text.DMA_SetSrcAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_SetSrcAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaSend()
</UL>

<P><STRONG><a name="[f3]"></a>DMA_SetTransCount</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, hc32_ll_dma.o(.text.DMA_SetTransCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_SetTransCount
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaSend()
</UL>

<P><STRONG><a name="[105]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hc32_ll_dma.o(.text.DMA_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>EFM_CacheCmd</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hc32_ll_efm.o(.text.EFM_CacheCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EFM_CacheCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[de]"></a>EFM_CacheRamReset</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hc32_ll_efm.o(.text.EFM_CacheRamReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EFM_CacheRamReset
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[da]"></a>EFM_SetWaitCycle</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, hc32_ll_efm.o(.text.EFM_SetWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EFM_SetWaitCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[e1]"></a>EXTINT_ClearExtIntStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.EXTINT_ClearExtIntStatus), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTINT_ClearExtIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_KEY_KEY10_IrqHandler
</UL>

<P><STRONG><a name="[f4]"></a>FCG_Fcg0PeriphClockCmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, hc32_ll_fcg.o(.text.FCG_Fcg0PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FCG_Fcg0PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>FCG_Fcg1PeriphClockCmd</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hc32_ll_fcg.o(.text.FCG_Fcg1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FCG_Fcg1PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>GPIO_AnalogCmd</STRONG> (Thumb, 742 bytes, Stack size 24 bytes, hc32_ll_gpio.o(.text.GPIO_AnalogCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_AnalogCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[e4]"></a>GPIO_Init</STRONG> (Thumb, 544 bytes, Stack size 24 bytes, hc32_ll_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[e0]"></a>GPIO_ReadInputPins</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, hc32_ll_gpio.o(.text.GPIO_ReadInputPins), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ReadInputPins
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_KEY_KEY10_IrqHandler
</UL>

<P><STRONG><a name="[e6]"></a>GPIO_ResetPins</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hc32_ll_gpio.o(.text.GPIO_ResetPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ResetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>

<P><STRONG><a name="[f6]"></a>GPIO_SetFunc</STRONG> (Thumb, 498 bytes, Stack size 24 bytes, hc32_ll_gpio.o(.text.GPIO_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>GPIO_SetPins</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hc32_ll_gpio.o(.text.GPIO_SetPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
</UL>

<P><STRONG><a name="[db]"></a>GPIO_SetReadWaitCycle</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hc32_ll_gpio.o(.text.GPIO_SetReadWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetReadWaitCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[e3]"></a>GPIO_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hc32_ll_gpio.o(.text.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[f7]"></a>INTC_IrqSignIn</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, hc32_ll_interrupts.o(.text.INTC_IrqSignIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = INTC_IrqSignIn
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>IRQ000_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ000_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRQ001_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ001_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>IRQ002_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ002_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>IRQ003_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ003_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ004_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ004_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ004_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ005_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ005_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ005_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>IRQ006_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ006_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ007_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ008_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ008_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ009_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ009_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ009_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ010_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ010_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ011_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ011_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ011_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ012_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ013_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ013_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ013_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ014_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ014_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ015_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ015_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ016_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ016_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ017_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ017_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ018_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ019_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ020_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ020_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ021_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ021_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ022_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ022_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ023_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ023_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ024_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ024_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ025_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ025_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ025_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ026_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ026_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ027_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ027_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ028_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ028_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ029_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ029_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ029_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ030_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ030_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ030_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ031_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ031_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ031_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ032_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ032_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ032_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ033_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ033_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ033_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ034_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ034_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ034_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>IRQ035_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ035_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ035_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>IRQ036_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ036_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ036_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>IRQ037_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ037_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ037_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ038_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ038_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ038_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>IRQ039_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ039_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ039_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>IRQ040_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ040_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ040_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>IRQ041_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ041_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ041_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>IRQ042_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ042_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ042_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>IRQ043_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ043_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ043_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IRQ044_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ044_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ044_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IRQ045_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ045_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ045_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IRQ046_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ046_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ046_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IRQ047_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ047_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ047_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>IRQ048_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ048_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ048_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>IRQ049_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ049_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ049_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>IRQ050_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ050_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ050_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>IRQ051_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ051_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ051_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IRQ052_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ052_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ052_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>IRQ053_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ053_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ053_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>IRQ054_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ054_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ054_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>IRQ055_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ055_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ055_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>IRQ056_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ056_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ056_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>IRQ057_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ057_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ057_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>IRQ058_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ058_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ058_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>IRQ059_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ059_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ059_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>IRQ060_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ060_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ060_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>IRQ061_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ061_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ061_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>IRQ062_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ062_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ062_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>IRQ063_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ063_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ063_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>IRQ064_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ064_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ064_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>IRQ065_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ065_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ065_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>IRQ066_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ066_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ066_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>IRQ067_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ067_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ067_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>IRQ068_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ068_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ068_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>IRQ069_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ069_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ069_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IRQ070_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ070_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ070_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IRQ071_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ071_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ071_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IRQ072_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ072_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ072_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IRQ073_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ073_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ073_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IRQ074_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ074_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ074_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IRQ075_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ075_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ075_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>IRQ076_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ076_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ076_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ077_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ077_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ077_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IRQ078_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ078_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ078_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>IRQ079_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ079_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ079_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IRQ080_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ080_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ080_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>IRQ081_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ081_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ081_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IRQ082_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ082_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ082_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>IRQ083_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ083_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ083_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>IRQ084_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ084_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ084_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IRQ085_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ085_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ085_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>IRQ086_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ086_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ086_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>IRQ087_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ087_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ087_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IRQ088_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ088_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ088_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>IRQ089_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ089_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ089_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IRQ090_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ090_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ090_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IRQ091_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ091_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ091_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>IRQ092_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ092_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ092_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IRQ093_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ093_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ093_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>IRQ094_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ094_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ094_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>IRQ095_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ095_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ095_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IRQ096_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ096_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ096_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>IRQ097_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ097_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ097_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>IRQ098_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ098_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ098_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>IRQ099_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ099_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ099_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ100_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ100_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ100_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IRQ101_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ101_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ101_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>IRQ102_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ102_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ102_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>IRQ103_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ103_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ103_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IRQ104_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ104_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ104_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>IRQ105_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ105_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ105_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>IRQ106_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ106_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ106_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>IRQ107_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ107_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ107_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>IRQ108_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ108_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ108_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>IRQ109_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ109_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ109_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>IRQ110_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ110_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ110_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>IRQ111_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ111_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ111_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>IRQ112_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ112_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ112_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>IRQ113_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ113_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ113_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>IRQ114_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ114_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ114_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>IRQ115_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ115_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ115_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>IRQ116_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ116_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ116_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>IRQ117_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ117_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ117_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>IRQ118_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ118_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ118_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>IRQ119_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ119_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ119_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>IRQ120_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ120_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ120_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>IRQ121_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ121_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ121_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>IRQ122_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ122_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ122_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>IRQ123_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ123_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ123_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>IRQ124_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ124_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ124_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>IRQ125_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ125_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ125_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>IRQ126_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ126_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ126_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>IRQ127_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ127_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ127_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>LL_PERIPH_WE</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, hc32_ll.o(.text.LL_PERIPH_WE))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>LL_PERIPH_WP</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, hc32_ll.o(.text.LL_PERIPH_WP))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>PWC_HighSpeedToHighPerformance</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hc32_ll_pwc.o(.text.PWC_HighSpeedToHighPerformance))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWC_HighSpeedToHighPerformance &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[f8]"></a>SPI_Cmd</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, hc32_ll_spi.o(.text.SPI_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaSend()
</UL>

<P><STRONG><a name="[f9]"></a>SPI_Init</STRONG> (Thumb, 622 bytes, Stack size 24 bytes, hc32_ll_spi.o(.text.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>SPI_StructInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hc32_ll_spi.o(.text.SPI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>SRAM_SetWaitCycle</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, hc32_ll_sram.o(.text.SRAM_SetWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SRAM_SetWaitCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32_ll_utility.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>SysTick_Init</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, hc32_ll_utility.o(.text.SysTick_Init))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, system_hc32f460.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClockSrc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
</UL>

<P><STRONG><a name="[9a]"></a>SystemInit</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, system_hc32f460.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(.text)
</UL>
<P><STRONG><a name="[108]"></a>MillisTaskManager::Running(unsigned int)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, millistaskmanager.o(.text._ZN17MillisTaskManager7RunningEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MillisTaskManager::Running(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>MillisTaskManager::Register(void (*)(), unsigned int, bool)</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, millistaskmanager.o(.text._ZN17MillisTaskManager8RegisterEPFvvEjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MillisTaskManager::Register(void (*)(), unsigned int, bool) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>MillisTaskManager::MillisTaskManager(bool)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, millistaskmanager.o(.text._ZN17MillisTaskManagerC2Eb))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[13d]"></a>MillisTaskManager::MillisTaskManager__sub_object(bool)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, millistaskmanager.o(.text._ZN17MillisTaskManagerC2Eb), UNUSED)

<P><STRONG><a name="[9c]"></a>MillisTaskManager::~MillisTaskManager()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, millistaskmanager.o(.text._ZN17MillisTaskManagerD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MillisTaskManager::~MillisTaskManager() &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text._GLOBAL__sub_I_main.cpp)
</UL>
<P><STRONG><a name="[13e]"></a>MillisTaskManager::~MillisTaskManager__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, millistaskmanager.o(.text._ZN17MillisTaskManagerD2Ev), UNUSED)

<P><STRONG><a name="[100]"></a>std::__terminate(void (*)())</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt11__terminatePFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = std::__terminate(void (*)()) &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[102]"></a>std::get_new_handler()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt15get_new_handlerv))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>

<P><STRONG><a name="[a2]"></a>std::terminate()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt9terminatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; std::__terminate(void (*)()) &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void (*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_default_handlers.cpp.o(.data.__cxa_unexpected_handler)
</UL>
<P><STRONG><a name="[ff]"></a>operator delete(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MillisTaskManager::~MillisTaskManager()
</UL>

<P><STRONG><a name="[fe]"></a>operator new(unsigned int)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, new.cpp.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MillisTaskManager::Register(void (*)(), unsigned int, bool)
</UL>

<P><STRONG><a name="[101]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void (*)())
</UL>

<P><STRONG><a name="[fc]"></a>delay_ms</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, hc32_ll_utility.o(.text.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaSend()
</UL>

<P><STRONG><a name="[ea]"></a>delay_us</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, hc32_ll_utility.o(.text.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_HighSpeedToHighPerformance
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClockSrc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
</UL>

<P><STRONG><a name="[b7]"></a>main</STRONG> (Thumb, 510 bytes, Stack size 104 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = main &rArr; BSP_CLK_Init &rArr; CLK_PLLInit &rArr; CLK_PLLCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MillisTaskManager::Register(void (*)(), unsigned int, bool)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MillisTaskManager::Running(unsigned int)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg1PeriphClockCmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg0PeriphClockCmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChCmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CLK_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AOS_SetTriggerEventSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[107]"></a>millis</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32_ll_utility.o(.text.millis))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>_fp_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[13f]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a0]"></a>_GLOBAL__sub_I_main.cpp</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text._GLOBAL__sub_I_main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _GLOBAL__sub_I_main.cpp &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MillisTaskManager::MillisTaskManager(bool)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[9d]"></a>DMA_TransCompleteCallback()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text._ZL25DMA_TransCompleteCallbackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_TransCompleteCallback() &rArr; DMA_ClearTransCompleteStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearTransCompleteStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[9f]"></a>dmaSend()</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, main.o(.text._ZL7dmaSendv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = dmaSend() &rArr; DMA_SetTransCount
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetTransCount
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetSrcAddr
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetDestAddr
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[9e]"></a>led_blink()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text._ZL9led_blinkv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = led_blink() &rArr; BSP_LED_On &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
