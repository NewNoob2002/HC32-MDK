<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\debug\hc32f460jeta.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\debug\hc32f460jeta.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Mon May  5 18:03:57 2025
<BR><P>
<H3>Maximum Stack Usage =        476 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; usart_init &rArr; HardwareSerial::begin(unsigned int) &rArr; HardwareSerial::begin(unsigned int, unsigned short) &rArr; HardwareSerial::begin(stc_usart_uart_init_t const*, bool) &rArr; usart_irq_register(usart_interrupt_config_t&, char const*, unsigned int) &rArr; irqn_aa_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d7]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[13]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">NMI_Handler</a><BR>
 <LI><a href="#[15]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">MemManage_Handler</a><BR>
 <LI><a href="#[16]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">BusFault_Handler</a><BR>
 <LI><a href="#[17]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">UsageFault_Handler</a><BR>
 <LI><a href="#[18]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">SVC_Handler</a><BR>
 <LI><a href="#[19]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">DebugMon_Handler</a><BR>
 <LI><a href="#[9c]">IRQ128_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9c]">IRQ128_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">BusFault_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[19]">DebugMon_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[14]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1c]">IRQ000_Handler</a> from hc32_ll_interrupts.o(.text.IRQ000_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1d]">IRQ001_Handler</a> from hc32_ll_interrupts.o(.text.IRQ001_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1e]">IRQ002_Handler</a> from hc32_ll_interrupts.o(.text.IRQ002_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1f]">IRQ003_Handler</a> from hc32_ll_interrupts.o(.text.IRQ003_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[20]">IRQ004_Handler</a> from hc32_ll_interrupts.o(.text.IRQ004_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[21]">IRQ005_Handler</a> from hc32_ll_interrupts.o(.text.IRQ005_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[22]">IRQ006_Handler</a> from hc32_ll_interrupts.o(.text.IRQ006_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[23]">IRQ007_Handler</a> from hc32_ll_interrupts.o(.text.IRQ007_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[24]">IRQ008_Handler</a> from hc32_ll_interrupts.o(.text.IRQ008_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[25]">IRQ009_Handler</a> from hc32_ll_interrupts.o(.text.IRQ009_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[26]">IRQ010_Handler</a> from hc32_ll_interrupts.o(.text.IRQ010_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[27]">IRQ011_Handler</a> from hc32_ll_interrupts.o(.text.IRQ011_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[28]">IRQ012_Handler</a> from hc32_ll_interrupts.o(.text.IRQ012_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[29]">IRQ013_Handler</a> from hc32_ll_interrupts.o(.text.IRQ013_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2a]">IRQ014_Handler</a> from hc32_ll_interrupts.o(.text.IRQ014_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2b]">IRQ015_Handler</a> from hc32_ll_interrupts.o(.text.IRQ015_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2c]">IRQ016_Handler</a> from hc32_ll_interrupts.o(.text.IRQ016_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2d]">IRQ017_Handler</a> from hc32_ll_interrupts.o(.text.IRQ017_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2e]">IRQ018_Handler</a> from hc32_ll_interrupts.o(.text.IRQ018_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[2f]">IRQ019_Handler</a> from hc32_ll_interrupts.o(.text.IRQ019_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[30]">IRQ020_Handler</a> from hc32_ll_interrupts.o(.text.IRQ020_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[31]">IRQ021_Handler</a> from hc32_ll_interrupts.o(.text.IRQ021_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[32]">IRQ022_Handler</a> from hc32_ll_interrupts.o(.text.IRQ022_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[33]">IRQ023_Handler</a> from hc32_ll_interrupts.o(.text.IRQ023_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[34]">IRQ024_Handler</a> from hc32_ll_interrupts.o(.text.IRQ024_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[35]">IRQ025_Handler</a> from hc32_ll_interrupts.o(.text.IRQ025_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[36]">IRQ026_Handler</a> from hc32_ll_interrupts.o(.text.IRQ026_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[37]">IRQ027_Handler</a> from hc32_ll_interrupts.o(.text.IRQ027_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[38]">IRQ028_Handler</a> from hc32_ll_interrupts.o(.text.IRQ028_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[39]">IRQ029_Handler</a> from hc32_ll_interrupts.o(.text.IRQ029_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3a]">IRQ030_Handler</a> from hc32_ll_interrupts.o(.text.IRQ030_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3b]">IRQ031_Handler</a> from hc32_ll_interrupts.o(.text.IRQ031_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3c]">IRQ032_Handler</a> from hc32_ll_interrupts.o(.text.IRQ032_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3d]">IRQ033_Handler</a> from hc32_ll_interrupts.o(.text.IRQ033_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3e]">IRQ034_Handler</a> from hc32_ll_interrupts.o(.text.IRQ034_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[3f]">IRQ035_Handler</a> from hc32_ll_interrupts.o(.text.IRQ035_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[40]">IRQ036_Handler</a> from hc32_ll_interrupts.o(.text.IRQ036_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[41]">IRQ037_Handler</a> from hc32_ll_interrupts.o(.text.IRQ037_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[42]">IRQ038_Handler</a> from hc32_ll_interrupts.o(.text.IRQ038_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[43]">IRQ039_Handler</a> from hc32_ll_interrupts.o(.text.IRQ039_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[44]">IRQ040_Handler</a> from hc32_ll_interrupts.o(.text.IRQ040_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[45]">IRQ041_Handler</a> from hc32_ll_interrupts.o(.text.IRQ041_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[46]">IRQ042_Handler</a> from hc32_ll_interrupts.o(.text.IRQ042_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[47]">IRQ043_Handler</a> from hc32_ll_interrupts.o(.text.IRQ043_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[48]">IRQ044_Handler</a> from hc32_ll_interrupts.o(.text.IRQ044_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[49]">IRQ045_Handler</a> from hc32_ll_interrupts.o(.text.IRQ045_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4a]">IRQ046_Handler</a> from hc32_ll_interrupts.o(.text.IRQ046_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4b]">IRQ047_Handler</a> from hc32_ll_interrupts.o(.text.IRQ047_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4c]">IRQ048_Handler</a> from hc32_ll_interrupts.o(.text.IRQ048_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4d]">IRQ049_Handler</a> from hc32_ll_interrupts.o(.text.IRQ049_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4e]">IRQ050_Handler</a> from hc32_ll_interrupts.o(.text.IRQ050_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[4f]">IRQ051_Handler</a> from hc32_ll_interrupts.o(.text.IRQ051_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[50]">IRQ052_Handler</a> from hc32_ll_interrupts.o(.text.IRQ052_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[51]">IRQ053_Handler</a> from hc32_ll_interrupts.o(.text.IRQ053_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[52]">IRQ054_Handler</a> from hc32_ll_interrupts.o(.text.IRQ054_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[53]">IRQ055_Handler</a> from hc32_ll_interrupts.o(.text.IRQ055_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[54]">IRQ056_Handler</a> from hc32_ll_interrupts.o(.text.IRQ056_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[55]">IRQ057_Handler</a> from hc32_ll_interrupts.o(.text.IRQ057_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[56]">IRQ058_Handler</a> from hc32_ll_interrupts.o(.text.IRQ058_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[57]">IRQ059_Handler</a> from hc32_ll_interrupts.o(.text.IRQ059_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[58]">IRQ060_Handler</a> from hc32_ll_interrupts.o(.text.IRQ060_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[59]">IRQ061_Handler</a> from hc32_ll_interrupts.o(.text.IRQ061_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5a]">IRQ062_Handler</a> from hc32_ll_interrupts.o(.text.IRQ062_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5b]">IRQ063_Handler</a> from hc32_ll_interrupts.o(.text.IRQ063_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5c]">IRQ064_Handler</a> from hc32_ll_interrupts.o(.text.IRQ064_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5d]">IRQ065_Handler</a> from hc32_ll_interrupts.o(.text.IRQ065_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5e]">IRQ066_Handler</a> from hc32_ll_interrupts.o(.text.IRQ066_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[5f]">IRQ067_Handler</a> from hc32_ll_interrupts.o(.text.IRQ067_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[60]">IRQ068_Handler</a> from hc32_ll_interrupts.o(.text.IRQ068_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[61]">IRQ069_Handler</a> from hc32_ll_interrupts.o(.text.IRQ069_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[62]">IRQ070_Handler</a> from hc32_ll_interrupts.o(.text.IRQ070_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[63]">IRQ071_Handler</a> from hc32_ll_interrupts.o(.text.IRQ071_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[64]">IRQ072_Handler</a> from hc32_ll_interrupts.o(.text.IRQ072_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[65]">IRQ073_Handler</a> from hc32_ll_interrupts.o(.text.IRQ073_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[66]">IRQ074_Handler</a> from hc32_ll_interrupts.o(.text.IRQ074_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[67]">IRQ075_Handler</a> from hc32_ll_interrupts.o(.text.IRQ075_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[68]">IRQ076_Handler</a> from hc32_ll_interrupts.o(.text.IRQ076_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[69]">IRQ077_Handler</a> from hc32_ll_interrupts.o(.text.IRQ077_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6a]">IRQ078_Handler</a> from hc32_ll_interrupts.o(.text.IRQ078_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6b]">IRQ079_Handler</a> from hc32_ll_interrupts.o(.text.IRQ079_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6c]">IRQ080_Handler</a> from hc32_ll_interrupts.o(.text.IRQ080_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6d]">IRQ081_Handler</a> from hc32_ll_interrupts.o(.text.IRQ081_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6e]">IRQ082_Handler</a> from hc32_ll_interrupts.o(.text.IRQ082_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[6f]">IRQ083_Handler</a> from hc32_ll_interrupts.o(.text.IRQ083_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[70]">IRQ084_Handler</a> from hc32_ll_interrupts.o(.text.IRQ084_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[71]">IRQ085_Handler</a> from hc32_ll_interrupts.o(.text.IRQ085_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[72]">IRQ086_Handler</a> from hc32_ll_interrupts.o(.text.IRQ086_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[73]">IRQ087_Handler</a> from hc32_ll_interrupts.o(.text.IRQ087_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[74]">IRQ088_Handler</a> from hc32_ll_interrupts.o(.text.IRQ088_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[75]">IRQ089_Handler</a> from hc32_ll_interrupts.o(.text.IRQ089_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[76]">IRQ090_Handler</a> from hc32_ll_interrupts.o(.text.IRQ090_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[77]">IRQ091_Handler</a> from hc32_ll_interrupts.o(.text.IRQ091_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[78]">IRQ092_Handler</a> from hc32_ll_interrupts.o(.text.IRQ092_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[79]">IRQ093_Handler</a> from hc32_ll_interrupts.o(.text.IRQ093_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7a]">IRQ094_Handler</a> from hc32_ll_interrupts.o(.text.IRQ094_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7b]">IRQ095_Handler</a> from hc32_ll_interrupts.o(.text.IRQ095_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7c]">IRQ096_Handler</a> from hc32_ll_interrupts.o(.text.IRQ096_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7d]">IRQ097_Handler</a> from hc32_ll_interrupts.o(.text.IRQ097_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7e]">IRQ098_Handler</a> from hc32_ll_interrupts.o(.text.IRQ098_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[7f]">IRQ099_Handler</a> from hc32_ll_interrupts.o(.text.IRQ099_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[80]">IRQ100_Handler</a> from hc32_ll_interrupts.o(.text.IRQ100_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[81]">IRQ101_Handler</a> from hc32_ll_interrupts.o(.text.IRQ101_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[82]">IRQ102_Handler</a> from hc32_ll_interrupts.o(.text.IRQ102_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[83]">IRQ103_Handler</a> from hc32_ll_interrupts.o(.text.IRQ103_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[84]">IRQ104_Handler</a> from hc32_ll_interrupts.o(.text.IRQ104_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[85]">IRQ105_Handler</a> from hc32_ll_interrupts.o(.text.IRQ105_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[86]">IRQ106_Handler</a> from hc32_ll_interrupts.o(.text.IRQ106_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[87]">IRQ107_Handler</a> from hc32_ll_interrupts.o(.text.IRQ107_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[88]">IRQ108_Handler</a> from hc32_ll_interrupts.o(.text.IRQ108_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[89]">IRQ109_Handler</a> from hc32_ll_interrupts.o(.text.IRQ109_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8a]">IRQ110_Handler</a> from hc32_ll_interrupts.o(.text.IRQ110_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8b]">IRQ111_Handler</a> from hc32_ll_interrupts.o(.text.IRQ111_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8c]">IRQ112_Handler</a> from hc32_ll_interrupts.o(.text.IRQ112_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8d]">IRQ113_Handler</a> from hc32_ll_interrupts.o(.text.IRQ113_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8e]">IRQ114_Handler</a> from hc32_ll_interrupts.o(.text.IRQ114_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[8f]">IRQ115_Handler</a> from hc32_ll_interrupts.o(.text.IRQ115_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[90]">IRQ116_Handler</a> from hc32_ll_interrupts.o(.text.IRQ116_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[91]">IRQ117_Handler</a> from hc32_ll_interrupts.o(.text.IRQ117_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[92]">IRQ118_Handler</a> from hc32_ll_interrupts.o(.text.IRQ118_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[93]">IRQ119_Handler</a> from hc32_ll_interrupts.o(.text.IRQ119_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[94]">IRQ120_Handler</a> from hc32_ll_interrupts.o(.text.IRQ120_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[95]">IRQ121_Handler</a> from hc32_ll_interrupts.o(.text.IRQ121_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[96]">IRQ122_Handler</a> from hc32_ll_interrupts.o(.text.IRQ122_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[97]">IRQ123_Handler</a> from hc32_ll_interrupts.o(.text.IRQ123_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[98]">IRQ124_Handler</a> from hc32_ll_interrupts.o(.text.IRQ124_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[99]">IRQ125_Handler</a> from hc32_ll_interrupts.o(.text.IRQ125_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9a]">IRQ126_Handler</a> from hc32_ll_interrupts.o(.text.IRQ126_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9b]">IRQ127_Handler</a> from hc32_ll_interrupts.o(.text.IRQ127_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9c]">IRQ128_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9d]">IRQ129_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9e]">IRQ130_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[9f]">IRQ131_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a0]">IRQ132_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a1]">IRQ133_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a2]">IRQ134_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a3]">IRQ135_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a4]">IRQ136_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a5]">IRQ137_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a6]">IRQ138_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a7]">IRQ139_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a8]">IRQ140_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[a9]">IRQ141_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[aa]">IRQ142_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[ab]">IRQ143_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[15]">MemManage_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[13]">NMI_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1a]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[12]">Reset_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[18]">SVC_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[1b]">SysTick_Handler</a> from board.o(.text.SysTick_Handler) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[ac]">SystemInit</a> from system_hc32f460.o(.text.SystemInit) referenced from startup_hc32f460.o(.text)
 <LI><a href="#[17]">UsageFault_Handler</a> from startup_hc32f460.o(.text) referenced from startup_hc32f460.o(RESET)
 <LI><a href="#[d4]">_GLOBAL__sub_I_HardwareI2cSlave.cpp</a> from hardwarei2cslave.o(.text._GLOBAL__sub_I_HardwareI2cSlave.cpp) referenced from hardwarei2cslave.o(.init_array)
 <LI><a href="#[d2]">_GLOBAL__sub_I_HardwareSerial.cpp</a> from hardwareserial.o(.text._GLOBAL__sub_I_HardwareSerial.cpp) referenced from hardwareserial.o(.init_array)
 <LI><a href="#[d1]">_GLOBAL__sub_I_Key.cpp</a> from key.o(.text._GLOBAL__sub_I_Key.cpp) referenced from key.o(.init_array)
 <LI><a href="#[d3]">_GLOBAL__sub_I_Wire.cpp</a> from wire.o(.text._GLOBAL__sub_I_Wire.cpp) referenced from wire.o(.init_array)
 <LI><a href="#[b4]">KeyMonitor(void*)</a> from task.o(.text._Z10KeyMonitorPv) referenced 2 times from main.o(.text.main)
 <LI><a href="#[ae]">buttonEventCallback(EnhancedButton*, EnhancedButton::Event_t)</a> from key.o(.text._Z19buttonEventCallbackP14EnhancedButtonNS_7Event_tE) referenced 2 times from key.o(.text._Z7keyInitv)
 <LI><a href="#[b3]">ledStatusUpdateTask(void*)</a> from task.o(.text._Z19ledStatusUpdateTaskPv) referenced 2 times from main.o(.text.main)
 <LI><a href="#[1]">void USARTx_rx_error_irq&lang;(unsigned char)1&rang;()</a> from usart_config.o(.text._ZL19USARTx_rx_error_irqILh1EEvv) referenced 2 times from usart_config.o(.data.USART1_config)
 <LI><a href="#[5]">void USARTx_rx_error_irq&lang;(unsigned char)2&rang;()</a> from usart_config.o(.text._ZL19USARTx_rx_error_irqILh2EEvv) referenced 2 times from usart_config.o(.data.USART2_config)
 <LI><a href="#[9]">void USARTx_rx_error_irq&lang;(unsigned char)3&rang;()</a> from usart_config.o(.text._ZL19USARTx_rx_error_irqILh3EEvv) referenced 2 times from usart_config.o(.data.USART3_config)
 <LI><a href="#[d]">void USARTx_rx_error_irq&lang;(unsigned char)4&rang;()</a> from usart_config.o(.text._ZL19USARTx_rx_error_irqILh4EEvv) referenced 2 times from usart_config.o(.data.USART4_config)
 <LI><a href="#[3]">void USARTx_tx_complete_irq&lang;(unsigned char)1&rang;()</a> from usart_config.o(.text._ZL22USARTx_tx_complete_irqILh1EEvv) referenced 2 times from usart_config.o(.data.USART1_config)
 <LI><a href="#[7]">void USARTx_tx_complete_irq&lang;(unsigned char)2&rang;()</a> from usart_config.o(.text._ZL22USARTx_tx_complete_irqILh2EEvv) referenced 2 times from usart_config.o(.data.USART2_config)
 <LI><a href="#[b]">void USARTx_tx_complete_irq&lang;(unsigned char)3&rang;()</a> from usart_config.o(.text._ZL22USARTx_tx_complete_irqILh3EEvv) referenced 2 times from usart_config.o(.data.USART3_config)
 <LI><a href="#[f]">void USARTx_tx_complete_irq&lang;(unsigned char)4&rang;()</a> from usart_config.o(.text._ZL22USARTx_tx_complete_irqILh4EEvv) referenced 2 times from usart_config.o(.data.USART4_config)
 <LI><a href="#[2]">void USARTx_tx_buffer_empty_irq&lang;(unsigned char)1&rang;()</a> from usart_config.o(.text._ZL26USARTx_tx_buffer_empty_irqILh1EEvv) referenced 2 times from usart_config.o(.data.USART1_config)
 <LI><a href="#[6]">void USARTx_tx_buffer_empty_irq&lang;(unsigned char)2&rang;()</a> from usart_config.o(.text._ZL26USARTx_tx_buffer_empty_irqILh2EEvv) referenced 2 times from usart_config.o(.data.USART2_config)
 <LI><a href="#[a]">void USARTx_tx_buffer_empty_irq&lang;(unsigned char)3&rang;()</a> from usart_config.o(.text._ZL26USARTx_tx_buffer_empty_irqILh3EEvv) referenced 2 times from usart_config.o(.data.USART3_config)
 <LI><a href="#[e]">void USARTx_tx_buffer_empty_irq&lang;(unsigned char)4&rang;()</a> from usart_config.o(.text._ZL26USARTx_tx_buffer_empty_irqILh4EEvv) referenced 2 times from usart_config.o(.data.USART4_config)
 <LI><a href="#[0]">void USARTx_rx_data_available_irq&lang;(unsigned char)1&rang;()</a> from usart_config.o(.text._ZL28USARTx_rx_data_available_irqILh1EEvv) referenced 2 times from usart_config.o(.data.USART1_config)
 <LI><a href="#[4]">void USARTx_rx_data_available_irq&lang;(unsigned char)2&rang;()</a> from usart_config.o(.text._ZL28USARTx_rx_data_available_irqILh2EEvv) referenced 2 times from usart_config.o(.data.USART2_config)
 <LI><a href="#[8]">void USARTx_rx_data_available_irq&lang;(unsigned char)3&rang;()</a> from usart_config.o(.text._ZL28USARTx_rx_data_available_irqILh3EEvv) referenced 2 times from usart_config.o(.data.USART3_config)
 <LI><a href="#[c]">void USARTx_rx_data_available_irq&lang;(unsigned char)4&rang;()</a> from usart_config.o(.text._ZL28USARTx_rx_data_available_irqILh4EEvv) referenced 2 times from usart_config.o(.data.USART4_config)
 <LI><a href="#[ba]">HardwareSerial::availableForWrite()</a> from hardwareserial.o(.text._ZN14HardwareSerial17availableForWriteEv) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[be]">HardwareSerial::peek()</a> from hardwareserial.o(.text._ZN14HardwareSerial4peekEv) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[bd]">HardwareSerial::read()</a> from hardwareserial.o(.text._ZN14HardwareSerial4readEv) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[bb]">HardwareSerial::flush()</a> from hardwareserial.o(.text._ZN14HardwareSerial5flushEv) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[b8]">HardwareSerial::write(unsigned char)</a> from hardwareserial.o(.text._ZN14HardwareSerial5writeEh) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[bc]">HardwareSerial::available()</a> from hardwareserial.o(.text._ZN14HardwareSerial9availableEv) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[b7]">HardwareSerial::~HardwareSerial__deallocating()</a> from hardwareserial.o(.text._ZN14HardwareSerialD0Ev) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[af]">HardwareSerial::~HardwareSerial()</a> from hardwareserial.o(.text._ZN14HardwareSerialD2Ev) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[af]">HardwareSerial::~HardwareSerial()</a> from hardwareserial.o(.text._ZN14HardwareSerialD2Ev) referenced 2 times from hardwareserial.o(.text.__cxx_global_var_init)
 <LI><a href="#[c1]">HardwareI2cSlave::availableForWrite()</a> from hardwarei2cslave.o(.text._ZN16HardwareI2cSlave17availableForWriteEv) referenced from hardwarei2cslave.o(.rodata._ZTV16HardwareI2cSlave)
 <LI><a href="#[c5]">HardwareI2cSlave::peek()</a> from hardwarei2cslave.o(.text._ZN16HardwareI2cSlave4peekEv) referenced from hardwarei2cslave.o(.rodata._ZTV16HardwareI2cSlave)
 <LI><a href="#[c4]">HardwareI2cSlave::read()</a> from hardwarei2cslave.o(.text._ZN16HardwareI2cSlave4readEv) referenced from hardwarei2cslave.o(.rodata._ZTV16HardwareI2cSlave)
 <LI><a href="#[c2]">HardwareI2cSlave::flush()</a> from hardwarei2cslave.o(.text._ZN16HardwareI2cSlave5flushEv) referenced from hardwarei2cslave.o(.rodata._ZTV16HardwareI2cSlave)
 <LI><a href="#[c0]">HardwareI2cSlave::write(unsigned char)</a> from hardwarei2cslave.o(.text._ZN16HardwareI2cSlave5writeEh) referenced from hardwarei2cslave.o(.rodata._ZTV16HardwareI2cSlave)
 <LI><a href="#[c3]">HardwareI2cSlave::available()</a> from hardwarei2cslave.o(.text._ZN16HardwareI2cSlave9availableEv) referenced from hardwarei2cslave.o(.rodata._ZTV16HardwareI2cSlave)
 <LI><a href="#[bf]">HardwareI2cSlave::~HardwareI2cSlave__deallocating()</a> from hardwarei2cslave.o(.text._ZN16HardwareI2cSlaveD0Ev) referenced from hardwarei2cslave.o(.rodata._ZTV16HardwareI2cSlave)
 <LI><a href="#[b0]">HardwareI2cSlave::~HardwareI2cSlave()</a> from hardwarei2cslave.o(.text._ZN16HardwareI2cSlaveD2Ev) referenced from hardwarei2cslave.o(.rodata._ZTV16HardwareI2cSlave)
 <LI><a href="#[b0]">HardwareI2cSlave::~HardwareI2cSlave()</a> from hardwarei2cslave.o(.text._ZN16HardwareI2cSlaveD2Ev) referenced 2 times from hardwarei2cslave.o(.text.__cxx_global_var_init)
 <LI><a href="#[c9]">Print::availableForWrite()</a> from print.o(.text._ZN5Print17availableForWriteEv) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[c9]">Print::availableForWrite()</a> from print.o(.text._ZN5Print17availableForWriteEv) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[ca]">Print::flush()</a> from print.o(.text._ZN5Print5flushEv) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[b9]">Print::write(unsigned char const*, unsigned int)</a> from print.o(.text._ZN5Print5writeEPKhj) referenced from hardwareserial.o(.rodata._ZTV14HardwareSerial)
 <LI><a href="#[b9]">Print::write(unsigned char const*, unsigned int)</a> from print.o(.text._ZN5Print5writeEPKhj) referenced from hardwarei2cslave.o(.rodata._ZTV16HardwareI2cSlave)
 <LI><a href="#[b9]">Print::write(unsigned char const*, unsigned int)</a> from print.o(.text._ZN5Print5writeEPKhj) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[b9]">Print::write(unsigned char const*, unsigned int)</a> from print.o(.text._ZN5Print5writeEPKhj) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[c7]">Print::~Print__deallocating()</a> from print.o(.text._ZN5PrintD0Ev) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[c6]">Print::~Print__sub_object()</a> from print.o(.text._ZN5PrintD2Ev) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[cc]">Stream::~Stream__deallocating()</a> from hardwareserial.o(.text._ZN6StreamD0Ev) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[cb]">Stream::~Stream__sub_object()</a> from hardwareserial.o(.text._ZN6StreamD2Ev) referenced from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[11]">std::terminate()</a> from cxa_handlers.cpp.o(.text._ZSt9terminatev) referenced 2 times from cxa_default_handlers.cpp.o(.data.__cxa_unexpected_handler)
 <LI><a href="#[c8]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from print.o(.rodata._ZTV5Print)
 <LI><a href="#[c8]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 5 times from hardwareserial.o(.rodata._ZTV6Stream)
 <LI><a href="#[ad]">__main</a> from __main.o(!!!main) referenced from startup_hc32f460.o(.text)
 <LI><a href="#[10]">abort</a> from abort.o(.text) referenced 2 times from cxa_default_handlers.cpp.o(.data.__cxa_terminate_handler)
 <LI><a href="#[b5]">main_thread_entry</a> from components.o(.text.main_thread_entry) referenced 2 times from components.o(.text.rt_application_init)
 <LI><a href="#[b1]">rt_thread_exit</a> from thread.o(.text.rt_thread_exit) referenced 2 times from thread.o(.text._rt_thread_init)
 <LI><a href="#[b6]">rt_thread_idle_entry</a> from idle.o(.text.rt_thread_idle_entry) referenced 2 times from idle.o(.text.rt_thread_idle_init)
 <LI><a href="#[b2]">rt_thread_timeout</a> from thread.o(.text.rt_thread_timeout) referenced 2 times from thread.o(.text._rt_thread_init)
 <LI><a href="#[cf]">rti_board_end</a> from components.o(.text.rti_board_end) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[ce]">rti_board_start</a> from components.o(.text.rti_board_start) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[d0]">rti_end</a> from components.o(.text.rti_end) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[cd]">rti_start</a> from components.o(.text.rti_start) referenced from components.o(.rti_fn.0)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[ad]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[e2]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[240]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[241]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[242]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[243]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[244]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[eb]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[245]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[246]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[247]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[248]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[249]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[24a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[24b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[24c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[24d]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[24e]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[24f]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[250]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[251]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[252]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[253]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[254]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[255]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[256]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[257]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[258]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[259]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[f0]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[e6]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[25a]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[25b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[25c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[25d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[25e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[25f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[260]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[e1]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[261]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[e8]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ea]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[262]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[ec]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; usart_init &rArr; HardwareSerial::begin(unsigned int) &rArr; HardwareSerial::begin(unsigned int, unsigned short) &rArr; HardwareSerial::begin(stc_usart_uart_init_t const*, bool) &rArr; usart_irq_register(usart_interrupt_config_t&, char const*, unsigned int) &rArr; irqn_aa_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[263]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[104]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ef]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[264]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[f1]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[12]"></a>Reset_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>IRQ128_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>IRQ129_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>IRQ130_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>IRQ131_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>IRQ132_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>IRQ133_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>IRQ134_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>IRQ135_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>IRQ136_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>IRQ137_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>IRQ138_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>IRQ139_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>IRQ140_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>IRQ141_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>IRQ142_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>IRQ143_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f460.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_hc32f460.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f3]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[265]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[d8]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>

<P><STRONG><a name="[d9]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>

<P><STRONG><a name="[da]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[db]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[1a]"></a>PendSV_Handler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[dd]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[14]"></a>HardFault_Handler</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[f9]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
</UL>

<P><STRONG><a name="[268]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[269]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[fb]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e4]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[fd]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[26d]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_default_handlers.cpp.o(.data.__cxa_terminate_handler)
</UL>
<P><STRONG><a name="[f4]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[f2]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[26e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[26f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[fa]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[270]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[fe]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[fc]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[271]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[ee]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[101]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[100]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[102]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[105]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[106]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[ed]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, components.o(.text.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; usart_init &rArr; HardwareSerial::begin(unsigned int) &rArr; HardwareSerial::begin(unsigned int, unsigned short) &rArr; HardwareSerial::begin(stc_usart_uart_init_t const*, bool) &rArr; usart_irq_register(usart_interrupt_config_t&, char const*, unsigned int) &rArr; irqn_aa_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[108]"></a>ADC_ChCmd</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, hc32_ll_adc.o(.text.ADC_ChCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_ChCmd &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_channel
</UL>

<P><STRONG><a name="[109]"></a>ADC_ConvDataAverageChCmd</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, hc32_ll_adc.o(.text.ADC_ConvDataAverageChCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_ConvDataAverageChCmd &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_channel
</UL>

<P><STRONG><a name="[10a]"></a>ADC_ConvDataAverageConfig</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, hc32_ll_adc.o(.text.ADC_ConvDataAverageConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_ConvDataAverageConfig &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_channel
</UL>

<P><STRONG><a name="[10b]"></a>ADC_Init</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, hc32_ll_adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_Init &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_init(adc_device_t const*)
</UL>

<P><STRONG><a name="[10c]"></a>ADC_SetSampleTime</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, hc32_ll_adc.o(.text.ADC_SetSampleTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_SetSampleTime &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_channel
</UL>

<P><STRONG><a name="[d6]"></a>BSP_KEY_KEY10_IrqHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ev_hc32f460_lqfp100_v2.o(.text.BSP_KEY_KEY10_IrqHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_KEY_KEY10_IrqHandler &rArr; GPIO_ReadInputPins &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_ClearExtIntStatus
</UL>

<P><STRONG><a name="[10f]"></a>CLK_GetClockFreq</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hc32_ll_clk.o(.text.CLK_GetClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CLK_GetClockFreq &rArr; GetClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_system_clock_frequencies
</UL>

<P><STRONG><a name="[111]"></a>CLK_GetStableStatus</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hc32_ll_clk.o(.text.CLK_GetStableStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_GetStableStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitStable
</UL>

<P><STRONG><a name="[112]"></a>CLK_PLLCmd</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, hc32_ll_clk.o(.text.CLK_PLLCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLK_PLLCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitStable
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLInit
</UL>

<P><STRONG><a name="[114]"></a>CLK_PLLInit</STRONG> (Thumb, 958 bytes, Stack size 32 bytes, hc32_ll_clk.o(.text.CLK_PLLInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CLK_PLLInit &rArr; CLK_PLLCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[1d6]"></a>CLK_PLLStructInit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, hc32_ll_clk.o(.text.CLK_PLLStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_PLLStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[115]"></a>CLK_SetClockDiv</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hc32_ll_clk.o(.text.CLK_SetClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CLK_SetClockDiv &rArr; SetSysClockDiv &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockDiv
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_clock_init(bool)
</UL>

<P><STRONG><a name="[118]"></a>CLK_SetPeriClockSrc</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, hc32_ll_clk.o(.text.CLK_SetPeriClockSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_SetPeriClockSrc &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_clock_init(bool)
</UL>

<P><STRONG><a name="[119]"></a>CLK_SetSysClockSrc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hc32_ll_clk.o(.text.CLK_SetSysClockSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLK_SetSysClockSrc &rArr; SetSysClockSrc &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockSrc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[11b]"></a>CLK_XtalCmd</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, hc32_ll_clk.o(.text.CLK_XtalCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLK_XtalCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitStable
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalInit
</UL>

<P><STRONG><a name="[11c]"></a>CLK_XtalInit</STRONG> (Thumb, 434 bytes, Stack size 16 bytes, hc32_ll_clk.o(.text.CLK_XtalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CLK_XtalInit &rArr; CLK_XtalCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[1d5]"></a>CLK_XtalStructInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hc32_ll_clk.o(.text.CLK_XtalStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_XtalStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[d5]"></a>DDL_AssertHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hc32_ll_utility.o(.text.DDL_AssertHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteData
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg1PeriphClockCmd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetWaitCycle
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_HighSpeedToHighPerformance
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetReadWaitCycle
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AnalogCmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetWaitCycle
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_CacheRamReset
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_CacheCmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetStableStatus
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg3PeriphClockCmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPeriClockSrc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSampleTime
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConvDataAverageConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConvDataAverageChCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChCmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteData
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitStatus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStop
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStart
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateRestart
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BaudrateConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLCmd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockSrc
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockDiv
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_ClearExtIntStatus
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransAddr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SWResetCmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceiveDataAndStop
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BusWaitCmd
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AckConfig
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetUsartClockFreq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
</UL>

<P><STRONG><a name="[124]"></a>EFM_CacheCmd</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, hc32_ll_efm.o(.text.EFM_CacheCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EFM_CacheCmd &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[125]"></a>EFM_CacheRamReset</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, hc32_ll_efm.o(.text.EFM_CacheRamReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EFM_CacheRamReset &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[126]"></a>EFM_SetWaitCycle</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, hc32_ll_efm.o(.text.EFM_SetWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EFM_SetWaitCycle &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[10e]"></a>EXTINT_ClearExtIntStatus</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hc32_ll_interrupts.o(.text.EXTINT_ClearExtIntStatus), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTINT_ClearExtIntStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_KEY_KEY10_IrqHandler
</UL>

<P><STRONG><a name="[127]"></a>FCG_Fcg1PeriphClockCmd</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, hc32_ll_fcg.o(.text.FCG_Fcg1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FCG_Fcg1PeriphClockCmd &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(stc_usart_uart_init_t const*, bool)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
</UL>

<P><STRONG><a name="[128]"></a>FCG_Fcg3PeriphClockCmd</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, hc32_ll_fcg.o(.text.FCG_Fcg3PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FCG_Fcg3PeriphClockCmd &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_init(adc_device_t const*)
</UL>

<P><STRONG><a name="[129]"></a>GPIO_AnalogCmd</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, hc32_ll_gpio.o(.text.GPIO_AnalogCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_AnalogCmd &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[12a]"></a>GPIO_GetBit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wiring_digital.o(.text.GPIO_GetBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_GetBit &rArr; GPIO_ReadInputPins &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_info_t::bit_mask() const
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
</UL>

<P><STRONG><a name="[12c]"></a>GPIO_Init</STRONG> (Thumb, 782 bytes, Stack size 40 bytes, hc32_ll_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_Init &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GPIO_Init
</UL>

<P><STRONG><a name="[10d]"></a>GPIO_ReadInputPins</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, hc32_ll_gpio.o(.text.GPIO_ReadInputPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_ReadInputPins &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetBit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_KEY_KEY10_IrqHandler
</UL>

<P><STRONG><a name="[12d]"></a>GPIO_ResetBits</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wiring_digital.o(.text.GPIO_ResetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_ResetBits &rArr; GPIO_ResetPins &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_info_t::bit_mask() const
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
</UL>

<P><STRONG><a name="[12e]"></a>GPIO_ResetPins</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, hc32_ll_gpio.o(.text.GPIO_ResetPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_ResetPins &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[12f]"></a>GPIO_SetBits</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wiring_digital.o(.text.GPIO_SetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_SetBits &rArr; GPIO_SetPins &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_info_t::bit_mask() const
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
</UL>

<P><STRONG><a name="[131]"></a>GPIO_SetFunc</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, hc32_ll_gpio.o(.text.GPIO_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_SetFunc &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunction
</UL>

<P><STRONG><a name="[132]"></a>GPIO_SetFunction</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, hardwareserial.o(.text.GPIO_SetFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = GPIO_SetFunction &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_info_t::bit_mask() const
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(stc_usart_uart_init_t const*, bool)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
</UL>

<P><STRONG><a name="[130]"></a>GPIO_SetPins</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, hc32_ll_gpio.o(.text.GPIO_SetPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetPins &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>

<P><STRONG><a name="[134]"></a>GPIO_SetReadWaitCycle</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, hc32_ll_gpio.o(.text.GPIO_SetReadWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetReadWaitCycle &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[1e0]"></a>GPIO_StructInit</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, hc32_ll_gpio.o(.text.GPIO_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[135]"></a>I2C_AckConfig</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, hc32_ll_i2c.o(.text.I2C_AckConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_AckConfig &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char*, unsigned int, bool)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceiveDataAndStop
</UL>

<P><STRONG><a name="[136]"></a>I2C_BaudrateConfig</STRONG> (Thumb, 654 bytes, Stack size 112 bytes, hc32_ll_i2c.o(.text.I2C_BaudrateConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2C_BaudrateConfig &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[13e]"></a>I2C_BusWaitCmd</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, hc32_ll_i2c.o(.text.I2C_BusWaitCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_BusWaitCmd &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
</UL>

<P><STRONG><a name="[13f]"></a>I2C_ClearStatus</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, hc32_ll_i2c.o(.text.I2C_ClearStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_ClearStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceiveDataAndStop
</UL>

<P><STRONG><a name="[140]"></a>I2C_Cmd</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, hc32_ll_i2c.o(.text.I2C_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Cmd &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(bool)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char*, unsigned int, bool)
</UL>

<P><STRONG><a name="[141]"></a>I2C_DeInit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, hc32_ll_i2c.o(.text.I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_DeInit &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
</UL>

<P><STRONG><a name="[142]"></a>I2C_GenerateRestart</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hc32_ll_i2c.o(.text.I2C_GenerateRestart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_GenerateRestart &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
</UL>

<P><STRONG><a name="[143]"></a>I2C_GenerateStart</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hc32_ll_i2c.o(.text.I2C_GenerateStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_GenerateStart &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[144]"></a>I2C_GenerateStop</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hc32_ll_i2c.o(.text.I2C_GenerateStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_GenerateStop &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceiveDataAndStop
</UL>

<P><STRONG><a name="[145]"></a>I2C_GetStatus</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, hc32_ll_i2c.o(.text.I2C_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_GetStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransAddr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
</UL>

<P><STRONG><a name="[146]"></a>I2C_Init</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, hc32_ll_i2c.o(.text.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = I2C_Init &rArr; I2C_BaudrateConfig &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BaudrateConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
</UL>

<P><STRONG><a name="[147]"></a>I2C_MasterReceiveDataAndStop</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, hc32_ll_i2c.o(.text.I2C_MasterReceiveDataAndStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_MasterReceiveDataAndStop &rArr; I2C_WaitStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitStatus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadData
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStop
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearStatus
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AckConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char*, unsigned int, bool)
</UL>

<P><STRONG><a name="[149]"></a>I2C_ReadData</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hc32_ll_i2c.o(.text.I2C_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_ReadData &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceiveDataAndStop
</UL>

<P><STRONG><a name="[14a]"></a>I2C_Restart</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, hc32_ll_i2c.o(.text.I2C_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_Restart &rArr; I2C_WaitStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateRestart
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(bool)
</UL>

<P><STRONG><a name="[14b]"></a>I2C_SWResetCmd</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, hc32_ll_i2c.o(.text.I2C_SWResetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_SWResetCmd &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
</UL>

<P><STRONG><a name="[14c]"></a>I2C_Start</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, hc32_ll_i2c.o(.text.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_Start &rArr; I2C_WaitStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitStatus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
</UL>

<P><STRONG><a name="[14d]"></a>I2C_Stop</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, hc32_ll_i2c.o(.text.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_Stop &rArr; I2C_WaitStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitStatus
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateStop
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearStatus
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(bool)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char*, unsigned int, bool)
</UL>

<P><STRONG><a name="[1bf]"></a>I2C_StructInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hc32_ll_i2c.o(.text.I2C_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
</UL>

<P><STRONG><a name="[14e]"></a>I2C_TransAddr</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, hc32_ll_i2c.o(.text.I2C_TransAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_TransAddr &rArr; I2C_WaitStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteData
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitStatus
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char*, unsigned int, bool)
</UL>

<P><STRONG><a name="[150]"></a>I2C_TransData</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, hc32_ll_i2c.o(.text.I2C_TransData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_TransData &rArr; I2C_WaitStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteData
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitStatus
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(unsigned char)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(unsigned char const*, unsigned int)
</UL>

<P><STRONG><a name="[148]"></a>I2C_WaitStatus</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, hc32_ll_i2c.o(.text.I2C_WaitStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransAddr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceiveDataAndStop
</UL>

<P><STRONG><a name="[14f]"></a>I2C_WriteData</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hc32_ll_i2c.o(.text.I2C_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WriteData &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransAddr
</UL>

<P><STRONG><a name="[151]"></a>INTC_IrqSignIn</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, hc32_ll_interrupts.o(.text.INTC_IrqSignIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = INTC_IrqSignIn &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_irq_register(usart_interrupt_config_t&, char const*, unsigned int)
</UL>

<P><STRONG><a name="[1c]"></a>IRQ000_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ000_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ001_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ001_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ002_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ002_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ003_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ003_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ004_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ004_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ004_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ005_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ005_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ005_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ006_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ006_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ007_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ008_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ008_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ009_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ009_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ009_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ010_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ010_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ011_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ011_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ011_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ012_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ013_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ013_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ013_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ014_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ014_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ015_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ015_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ016_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ016_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>IRQ017_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ017_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>IRQ018_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>IRQ019_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ020_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ020_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>IRQ021_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ021_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>IRQ022_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ022_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>IRQ023_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ023_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>IRQ024_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ024_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>IRQ025_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ025_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ025_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IRQ026_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ026_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IRQ027_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ027_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IRQ028_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ028_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IRQ029_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ029_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ029_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>IRQ030_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ030_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ030_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>IRQ031_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ031_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ031_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>IRQ032_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ032_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ032_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>IRQ033_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ033_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ033_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IRQ034_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ034_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ034_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>IRQ035_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ035_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ035_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>IRQ036_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ036_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ036_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>IRQ037_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ037_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ037_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>IRQ038_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ038_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ038_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>IRQ039_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ039_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ039_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>IRQ040_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ040_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ040_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>IRQ041_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ041_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ041_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>IRQ042_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ042_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ042_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>IRQ043_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ043_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ043_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>IRQ044_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ044_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ044_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>IRQ045_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ045_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ045_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>IRQ046_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ046_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ046_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>IRQ047_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ047_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ047_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>IRQ048_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ048_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ048_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>IRQ049_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ049_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ049_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>IRQ050_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ050_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ050_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>IRQ051_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ051_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ051_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IRQ052_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ052_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ052_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IRQ053_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ053_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ053_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IRQ054_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ054_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ054_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IRQ055_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ055_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ055_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IRQ056_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ056_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ056_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IRQ057_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ057_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ057_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>IRQ058_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ058_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ058_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ059_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ059_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ059_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IRQ060_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ060_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ060_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>IRQ061_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ061_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ061_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IRQ062_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ062_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ062_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>IRQ063_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ063_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ063_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IRQ064_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ064_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ064_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>IRQ065_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ065_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ065_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>IRQ066_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ066_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ066_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IRQ067_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ067_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ067_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>IRQ068_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ068_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ068_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>IRQ069_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ069_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ069_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IRQ070_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ070_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ070_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>IRQ071_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ071_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ071_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IRQ072_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ072_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ072_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IRQ073_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ073_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ073_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>IRQ074_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ074_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ074_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IRQ075_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ075_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ075_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>IRQ076_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ076_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ076_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>IRQ077_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ077_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ077_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IRQ078_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ078_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ078_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>IRQ079_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ079_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ079_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>IRQ080_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ080_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ080_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>IRQ081_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ081_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ081_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ082_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ082_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ082_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IRQ083_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ083_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ083_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>IRQ084_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ084_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ084_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>IRQ085_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ085_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ085_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IRQ086_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ086_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ086_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>IRQ087_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ087_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ087_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>IRQ088_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ088_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ088_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>IRQ089_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ089_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ089_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>IRQ090_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ090_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ090_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>IRQ091_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ091_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ091_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>IRQ092_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ092_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ092_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>IRQ093_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ093_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ093_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>IRQ094_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ094_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ094_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>IRQ095_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ095_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ095_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>IRQ096_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ096_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ096_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>IRQ097_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ097_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ097_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>IRQ098_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ098_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ098_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>IRQ099_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ099_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ099_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>IRQ100_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ100_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ100_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>IRQ101_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ101_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ101_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>IRQ102_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ102_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ102_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>IRQ103_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ103_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ103_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>IRQ104_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ104_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ104_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>IRQ105_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ105_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ105_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>IRQ106_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ106_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ106_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>IRQ107_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ107_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ107_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>IRQ108_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ108_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ108_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>IRQ109_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ109_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ109_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>IRQ110_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ110_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ110_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>IRQ111_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ111_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ111_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>IRQ112_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ112_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ112_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>IRQ113_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ113_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ113_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>IRQ114_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ114_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ114_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>IRQ115_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ115_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ115_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>IRQ116_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ116_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ116_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>IRQ117_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ117_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ117_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>IRQ118_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ118_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ118_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>IRQ119_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ119_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ119_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>IRQ120_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ120_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ120_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>IRQ121_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ121_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ121_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>IRQ122_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ122_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ122_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>IRQ123_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ123_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ123_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>IRQ124_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ124_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ124_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>IRQ125_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ125_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ125_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>IRQ126_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ126_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ126_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>IRQ127_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ127_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ127_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[152]"></a>LL_PERIPH_WE</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, hc32_ll.o(.text.LL_PERIPH_WE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_PERIPH_WE &rArr; PWC_REG_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_REG_Unlock
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_REG_Unlock
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_FCG0_REG_Unlock
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_REG_Unlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_REG_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[158]"></a>LL_PERIPH_WP</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, hc32_ll.o(.text.LL_PERIPH_WP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_PERIPH_WP &rArr; PWC_REG_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_REG_Lock
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_REG_Lock
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_FCG0_REG_Lock
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_REG_Lock
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_REG_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[15e]"></a>PWC_HighSpeedToHighPerformance</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hc32_ll_pwc.o(.text.PWC_HighSpeedToHighPerformance))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWC_HighSpeedToHighPerformance &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[160]"></a>SRAM_SetWaitCycle</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, hc32_ll_sram.o(.text.SRAM_SetWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SRAM_SetWaitCycle &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[1b]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, system_hc32f460.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClockSrc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[ac]"></a>SystemInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system_hc32f460.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f460.o(.text)
</UL>
<P><STRONG><a name="[166]"></a>USART_ClearStatus</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, hc32_ll_usart.o(.text.USART_ClearStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_ClearStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_error_irq(unsigned char)
</UL>

<P><STRONG><a name="[167]"></a>USART_FuncCmd</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, hc32_ll_usart.o(.text.USART_FuncCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_FuncCmd &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_buffer_empty_irq(unsigned char)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_complete_irq(unsigned char)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(stc_usart_uart_init_t const*, bool)
</UL>

<P><STRONG><a name="[168]"></a>USART_GetStatus</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, hc32_ll_usart.o(.text.USART_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_GetStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_error_irq(unsigned char)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(unsigned char)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::availableForWrite()
</UL>

<P><STRONG><a name="[16b]"></a>USART_ReadData</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hc32_ll_usart.o(.text.USART_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_ReadData &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_data_available_irq(unsigned char)
</UL>

<P><STRONG><a name="[16c]"></a>USART_SetBaudrate</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, hc32_ll_usart.o(.text.USART_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USART_SetBaudrate &rArr; SmartCard_CalculateBrr &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetUsartClockFreq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
</UL>

<P><STRONG><a name="[16d]"></a>USART_UART_Init</STRONG> (Thumb, 682 bytes, Stack size 40 bytes, hc32_ll_usart.o(.text.USART_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateBrr &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(stc_usart_uart_init_t const*, bool)
</UL>

<P><STRONG><a name="[1a7]"></a>USART_UART_StructInit</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, hc32_ll_usart.o(.text.USART_UART_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_UART_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned int, unsigned short)
</UL>

<P><STRONG><a name="[16e]"></a>USART_WriteData</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, hc32_ll_usart.o(.text.USART_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_WriteData &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_buffer_empty_irq(unsigned char)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(unsigned char)
</UL>

<P><STRONG><a name="[173]"></a>_GPIO_Init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wiring_digital.o(.text._GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _GPIO_Init &rArr; GPIO_Init &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_info_t::bit_mask() const
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[b4]"></a>KeyMonitor(void*)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, task.o(.text._Z10KeyMonitorPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = KeyMonitor(void*) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnhancedButton::update(bool)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[177]"></a>adc_adc_init(adc_device_t const*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, adc.o(.text._Z12adc_adc_initPK12adc_device_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = adc_adc_init(adc_device_t const*) &rArr; adc_clock_init(bool) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_clock_init(bool)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg3PeriphClockCmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_device_init
</UL>

<P><STRONG><a name="[179]"></a>DataLedUpdate()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, led.o(.text._Z13DataLedUpdatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DataLedUpdate() &rArr; digitalWrite &rArr; GPIO_SetBits &rArr; GPIO_SetPins &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledStatusUpdateTask(void*)
</UL>

<P><STRONG><a name="[17c]"></a>GnssLedUpdate()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, led.o(.text._Z13GnssLedUpdatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GnssLedUpdate() &rArr; digitalWrite &rArr; GPIO_SetBits &rArr; GPIO_SetPins &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledStatusUpdateTask(void*)
</UL>

<P><STRONG><a name="[17d]"></a>PowerLedUpdate()</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, led.o(.text._Z14PowerLedUpdatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PowerLedUpdate() &rArr; digitalWrite &rArr; GPIO_SetBits &rArr; GPIO_SetPins &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledStatusUpdateTask(void*)
</UL>

<P><STRONG><a name="[178]"></a>adc_clock_init(bool)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, adc.o(.text._Z14adc_clock_initb))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = adc_clock_init(bool) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPeriClockSrc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_init(adc_device_t const*)
</UL>

<P><STRONG><a name="[186]"></a>chargeLedBlink(int)</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, led.o(.text._Z14chargeLedBlinki))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = chargeLedBlink(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttonEventCallback(EnhancedButton*, EnhancedButton::Event_t)
</UL>

<P><STRONG><a name="[17e]"></a>ChargerLedUpdate()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, led.o(.text._Z16ChargerLedUpdatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ChargerLedUpdate() &rArr; digitalWrite &rArr; GPIO_SetBits &rArr; GPIO_SetPins &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledStatusUpdateTask(void*)
</UL>

<P><STRONG><a name="[180]"></a>irqn_bitfield_get(unsigned int)</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, irqn.o(.text._Z17irqn_bitfield_getj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = irqn_bitfield_get(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_bitfield_next(unsigned int&)
</UL>

<P><STRONG><a name="[1c6]"></a>irqn_bitfield_set(unsigned int, bool)</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, irqn.o(.text._Z17irqn_bitfield_setjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = irqn_bitfield_set(unsigned int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irqn_aa_get
</UL>

<P><STRONG><a name="[17f]"></a>irqn_bitfield_next(unsigned int&)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, irqn.o(.text._Z18irqn_bitfield_nextRj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = irqn_bitfield_next(unsigned int&) &rArr; irqn_bitfield_get(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_bitfield_get(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irqn_aa_get
</UL>

<P><STRONG><a name="[181]"></a>usart_irq_register(usart_interrupt_config_t&, char const*, unsigned int)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, hardwareserial.o(.text._Z18usart_irq_registerR24usart_interrupt_config_tPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = usart_irq_register(usart_interrupt_config_t&, char const*, unsigned int) &rArr; irqn_aa_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_aa_get
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ(IRQn_Type)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned int)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(stc_usart_uart_init_t const*, bool)
</UL>

<P><STRONG><a name="[1d3]"></a>adc_channel_to_mask(adc_device_t const*, unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, adc.o(.text._Z19adc_channel_to_maskPK12adc_device_th))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_channel_to_mask(adc_device_t const*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_channel
</UL>

<P><STRONG><a name="[ae]"></a>buttonEventCallback(EnhancedButton*, EnhancedButton::Event_t)</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, key.o(.text._Z19buttonEventCallbackP14EnhancedButtonNS_7Event_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = buttonEventCallback(EnhancedButton*, EnhancedButton::Event_t) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chargeLedBlink(int)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.text._Z7keyInitv)
</UL>
<P><STRONG><a name="[b3]"></a>ledStatusUpdateTask(void*)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, task.o(.text._Z19ledStatusUpdateTaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ledStatusUpdateTask(void*) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionKeyLedUpdate()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerLedUpdate()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLedUpdate()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GnssLedUpdate()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataLedUpdate()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[187]"></a>FunctionKeyLedUpdate()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, led.o(.text._Z20FunctionKeyLedUpdatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FunctionKeyLedUpdate() &rArr; digitalWrite &rArr; GPIO_SetBits &rArr; GPIO_SetPins &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledStatusUpdateTask(void*)
</UL>

<P><STRONG><a name="[1c7]"></a>irqn_bitfield_index_to_irqn(unsigned int)</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, irqn.o(.text._Z27irqn_bitfield_index_to_irqnj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = irqn_bitfield_index_to_irqn(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irqn_aa_get
</UL>

<P><STRONG><a name="[188]"></a>adcInit()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, powercontrol.o(.text._Z7adcInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = adcInit() &rArr; adc_device_init &rArr; adc_adc_init(adc_device_t const*) &rArr; adc_clock_init(bool) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_channel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[18b]"></a>keyInit()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, key.o(.text._Z7keyInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = keyInit() &rArr; pinMode &rArr; adc_device_init &rArr; adc_adc_init(adc_device_t const*) &rArr; adc_clock_init(bool) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnhancedButton::attachCallback(void (*)(EnhancedButton*, EnhancedButton::Event_t))
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[19a]"></a>RingBuffer&lang;unsigned char&rang;::_update_write_index(unsigned int)</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, usart_config.o(.text._ZN10RingBufferIhE19_update_write_indexEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::_update_write_index(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::_push(unsigned char)
</UL>

<P><STRONG><a name="[191]"></a>RingBuffer&lang;unsigned char&rang;::pop(unsigned char&)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, hardwareserial.o(.text._ZN10RingBufferIhE3popERh))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::pop(unsigned char&) &rArr; RingBuffer&lang;unsigned char&rang;::isEmpty() &rArr; RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::isEmpty()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::_pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_buffer_empty_irq(unsigned char)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::read()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2cSlave::read()
</UL>

<P><STRONG><a name="[195]"></a>RingBuffer&lang;unsigned char&rang;::_pop()</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, hardwareserial.o(.text._ZN10RingBufferIhE4_popEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::_pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::pop(unsigned char&)
</UL>

<P><STRONG><a name="[196]"></a>RingBuffer&lang;unsigned char&rang;::peek()</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, hardwareserial.o(.text._ZN10RingBufferIhE4peekEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::peek() &rArr; RingBuffer&lang;unsigned char&rang;::isEmpty() &rArr; RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::isEmpty()
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::peek()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2cSlave::peek()
</UL>

<P><STRONG><a name="[197]"></a>RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hardwarei2cslave.o(.text._ZN10RingBufferIhE4pushEhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool) &rArr; RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&) &rArr; RingBuffer&lang;unsigned char&rang;::_push(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::_update_write_index(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&)
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2cSlave::write(unsigned char)
</UL>

<P><STRONG><a name="[193]"></a>RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&)</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, usart_config.o(.text._ZN10RingBufferIhE4pushEhbRb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&) &rArr; RingBuffer&lang;unsigned char&rang;::_push(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::_update_write_index(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::isFull()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::_push(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_data_available_irq(unsigned char)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool)
</UL>

<P><STRONG><a name="[199]"></a>RingBuffer&lang;unsigned char&rang;::_push(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usart_config.o(.text._ZN10RingBufferIhE5_pushEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::_push(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::_update_write_index(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::_update_write_index(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&)
</UL>

<P><STRONG><a name="[19e]"></a>RingBuffer&lang;unsigned char&rang;::clear()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, hardwareserial.o(.text._ZN10RingBufferIhE5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(stc_usart_uart_init_t const*, bool)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::RingBuffer__sub_object(unsigned char*, unsigned int)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2cSlave::flush()
</UL>

<P><STRONG><a name="[19b]"></a>RingBuffer&lang;unsigned char&rang;::count()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hardwareserial.o(.text._ZN10RingBufferIhE5countEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::isFull()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::available()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::isEmpty()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2cSlave::available()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2cSlave::availableForWrite()
</UL>

<P><STRONG><a name="[198]"></a>RingBuffer&lang;unsigned char&rang;::isFull()</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, usart_config.o(.text._ZN10RingBufferIhE6isFullEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::isFull() &rArr; RingBuffer&lang;unsigned char&rang;::capacity()
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::capacity()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2cSlave::write(unsigned char)
</UL>

<P><STRONG><a name="[194]"></a>RingBuffer&lang;unsigned char&rang;::isEmpty()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hardwareserial.o(.text._ZN10RingBufferIhE7isEmptyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::isEmpty() &rArr; RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::peek()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::pop(unsigned char&)
</UL>

<P><STRONG><a name="[19c]"></a>RingBuffer&lang;unsigned char&rang;::capacity()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, usart_config.o(.text._ZN10RingBufferIhE8capacityEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::capacity()
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::isFull()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2cSlave::availableForWrite()
</UL>

<P><STRONG><a name="[19d]"></a>RingBuffer&lang;unsigned char&rang;::RingBuffer__sub_object(unsigned char*, unsigned int)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, hardwareserial.o(.text._ZN10RingBufferIhEC2EPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::RingBuffer__sub_object(unsigned char*, unsigned int) &rArr; RingBuffer&lang;unsigned char&rang;::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(stc_usart_uart_init_t const*, bool)
</UL>

<P><STRONG><a name="[19f]"></a>RingBuffer&lang;unsigned char&rang;::~RingBuffer__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, hardwareserial.o(.text._ZN10RingBufferIhED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RingBuffer&lang;unsigned char&rang;::~RingBuffer__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::~HardwareSerial()
</UL>

<P><STRONG><a name="[1a2]"></a>EnhancedButton::triggerEvent(EnhancedButton::Event_t)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, enhancedbutton.o(.text._ZN14EnhancedButton12triggerEventENS_7Event_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EnhancedButton::triggerEvent(EnhancedButton::Event_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnhancedButton::update(bool)
</UL>

<P><STRONG><a name="[18d]"></a>EnhancedButton::attachCallback(void (*)(EnhancedButton*, EnhancedButton::Event_t))</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, enhancedbutton.o(.text._ZN14EnhancedButton14attachCallbackEPFvPS_NS_7Event_tEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EnhancedButton::attachCallback(void (*)(EnhancedButton*, EnhancedButton::Event_t))
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyInit()
</UL>

<P><STRONG><a name="[1a1]"></a>EnhancedButton::getTickElapsed(unsigned int)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, enhancedbutton.o(.text._ZN14EnhancedButton14getTickElapsedEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EnhancedButton::getTickElapsed(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnhancedButton::update(bool)
</UL>

<P><STRONG><a name="[175]"></a>EnhancedButton::update(bool)</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, enhancedbutton.o(.text._ZN14EnhancedButton6updateEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EnhancedButton::update(bool) &rArr; EnhancedButton::getTickElapsed(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnhancedButton::getTickElapsed(unsigned int)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnhancedButton::triggerEvent(EnhancedButton::Event_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMonitor(void*)
</UL>

<P><STRONG><a name="[1c3]"></a>EnhancedButton::EnhancedButton(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, enhancedbutton.o(.text._ZN14EnhancedButtonC2Etttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EnhancedButton::EnhancedButton(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[274]"></a>EnhancedButton::EnhancedButton__sub_object(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, enhancedbutton.o(.text._ZN14EnhancedButtonC2Etttt), UNUSED)

<P><STRONG><a name="[ba]"></a>HardwareSerial::availableForWrite()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hardwareserial.o(.text._ZN14HardwareSerial17availableForWriteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HardwareSerial::availableForWrite() &rArr; USART_GetStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[be]"></a>HardwareSerial::peek()</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, hardwareserial.o(.text._ZN14HardwareSerial4peekEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HardwareSerial::peek() &rArr; RingBuffer&lang;unsigned char&rang;::peek() &rArr; RingBuffer&lang;unsigned char&rang;::isEmpty() &rArr; RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::peek()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[bd]"></a>HardwareSerial::read()</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, hardwareserial.o(.text._ZN14HardwareSerial4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = HardwareSerial::read() &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::pop(unsigned char&)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[1a3]"></a>HardwareSerial::begin(stc_usart_uart_init_t const*, bool)</STRONG> (Thumb, 422 bytes, Stack size 72 bytes, hardwareserial.o(.text._ZN14HardwareSerial5beginEPK21stc_usart_uart_init_tb))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = HardwareSerial::begin(stc_usart_uart_init_t const*, bool) &rArr; usart_irq_register(usart_interrupt_config_t&, char const*, unsigned int) &rArr; irqn_aa_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::RingBuffer__sub_object(unsigned char*, unsigned int)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::clear()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_irq_register(usart_interrupt_config_t&, char const*, unsigned int)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunction
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg1PeriphClockCmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned int, unsigned short)
</UL>

<P><STRONG><a name="[1a5]"></a>HardwareSerial::begin(unsigned int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hardwareserial.o(.text._ZN14HardwareSerial5beginEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = HardwareSerial::begin(unsigned int) &rArr; HardwareSerial::begin(unsigned int, unsigned short) &rArr; HardwareSerial::begin(stc_usart_uart_init_t const*, bool) &rArr; usart_irq_register(usart_interrupt_config_t&, char const*, unsigned int) &rArr; irqn_aa_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned int, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[1a6]"></a>HardwareSerial::begin(unsigned int, unsigned short)</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, hardwareserial.o(.text._ZN14HardwareSerial5beginEjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = HardwareSerial::begin(unsigned int, unsigned short) &rArr; HardwareSerial::begin(stc_usart_uart_init_t const*, bool) &rArr; usart_irq_register(usart_interrupt_config_t&, char const*, unsigned int) &rArr; irqn_aa_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(stc_usart_uart_init_t const*, bool)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned int)
</UL>

<P><STRONG><a name="[bb]"></a>HardwareSerial::flush()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hardwareserial.o(.text._ZN14HardwareSerial5flushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HardwareSerial::flush()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[b8]"></a>HardwareSerial::write(unsigned char)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hardwareserial.o(.text._ZN14HardwareSerial5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HardwareSerial::write(unsigned char) &rArr; USART_WriteData &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteData
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[bc]"></a>HardwareSerial::available()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hardwareserial.o(.text._ZN14HardwareSerial9availableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HardwareSerial::available() &rArr; RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[1a8]"></a>HardwareSerial::HardwareSerial(usart_config_t*, short, short)</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, hardwareserial.o(.text._ZN14HardwareSerialC2EP14usart_config_tss))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HardwareSerial::HardwareSerial(usart_config_t*, short, short) &rArr; Stream::Stream__sub_object() &rArr; Print::Print__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::Stream__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[275]"></a>HardwareSerial::HardwareSerial__sub_object(usart_config_t*, short, short)</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, hardwareserial.o(.text._ZN14HardwareSerialC2EP14usart_config_tss), UNUSED)

<P><STRONG><a name="[b7]"></a>HardwareSerial::~HardwareSerial__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hardwareserial.o(.text._ZN14HardwareSerialD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HardwareSerial::~HardwareSerial__deallocating() &rArr; HardwareSerial::~HardwareSerial() &rArr; RingBuffer&lang;unsigned char&rang;::~RingBuffer__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::~HardwareSerial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[af]"></a>HardwareSerial::~HardwareSerial()</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, hardwareserial.o(.text._ZN14HardwareSerialD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HardwareSerial::~HardwareSerial() &rArr; RingBuffer&lang;unsigned char&rang;::~RingBuffer__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::~Stream__sub_object()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::~RingBuffer__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::~HardwareSerial__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> hardwareserial.o(.text.__cxx_global_var_init)
</UL>
<P><STRONG><a name="[276]"></a>HardwareSerial::~HardwareSerial__sub_object()</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, hardwareserial.o(.text._ZN14HardwareSerialD2Ev), UNUSED)

<P><STRONG><a name="[c1]"></a>HardwareI2cSlave::availableForWrite()</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, hardwarei2cslave.o(.text._ZN16HardwareI2cSlave17availableForWriteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HardwareI2cSlave::availableForWrite() &rArr; RingBuffer&lang;unsigned char&rang;::capacity()
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::capacity()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwarei2cslave.o(.rodata._ZTV16HardwareI2cSlave)
</UL>
<P><STRONG><a name="[c5]"></a>HardwareI2cSlave::peek()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hardwarei2cslave.o(.text._ZN16HardwareI2cSlave4peekEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HardwareI2cSlave::peek() &rArr; RingBuffer&lang;unsigned char&rang;::peek() &rArr; RingBuffer&lang;unsigned char&rang;::isEmpty() &rArr; RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::peek()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwarei2cslave.o(.rodata._ZTV16HardwareI2cSlave)
</UL>
<P><STRONG><a name="[c4]"></a>HardwareI2cSlave::read()</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, hardwarei2cslave.o(.text._ZN16HardwareI2cSlave4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = HardwareI2cSlave::read() &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::pop(unsigned char&)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwarei2cslave.o(.rodata._ZTV16HardwareI2cSlave)
</UL>
<P><STRONG><a name="[c2]"></a>HardwareI2cSlave::flush()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hardwarei2cslave.o(.text._ZN16HardwareI2cSlave5flushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HardwareI2cSlave::flush() &rArr; RingBuffer&lang;unsigned char&rang;::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::clear()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwarei2cslave.o(.rodata._ZTV16HardwareI2cSlave)
</UL>
<P><STRONG><a name="[c0]"></a>HardwareI2cSlave::write(unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, hardwarei2cslave.o(.text._ZN16HardwareI2cSlave5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HardwareI2cSlave::write(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool) &rArr; RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&) &rArr; RingBuffer&lang;unsigned char&rang;::_push(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::_update_write_index(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::isFull()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwarei2cslave.o(.rodata._ZTV16HardwareI2cSlave)
</UL>
<P><STRONG><a name="[c3]"></a>HardwareI2cSlave::available()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hardwarei2cslave.o(.text._ZN16HardwareI2cSlave9availableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HardwareI2cSlave::available() &rArr; RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwarei2cslave.o(.rodata._ZTV16HardwareI2cSlave)
</UL>
<P><STRONG><a name="[1ac]"></a>HardwareI2cSlave::HardwareI2cSlave()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hardwarei2cslave.o(.text._ZN16HardwareI2cSlaveC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HardwareI2cSlave::HardwareI2cSlave() &rArr; Stream::Stream__sub_object() &rArr; Print::Print__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::Stream__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[277]"></a>HardwareI2cSlave::HardwareI2cSlave__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hardwarei2cslave.o(.text._ZN16HardwareI2cSlaveC2Ev), UNUSED)

<P><STRONG><a name="[bf]"></a>HardwareI2cSlave::~HardwareI2cSlave__deallocating()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hardwarei2cslave.o(.text._ZN16HardwareI2cSlaveD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HardwareI2cSlave::~HardwareI2cSlave__deallocating() &rArr; HardwareI2cSlave::~HardwareI2cSlave() &rArr; Stream::~Stream__sub_object() &rArr; Print::~Print__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2cSlave::~HardwareI2cSlave()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwarei2cslave.o(.rodata._ZTV16HardwareI2cSlave)
</UL>
<P><STRONG><a name="[b0]"></a>HardwareI2cSlave::~HardwareI2cSlave()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hardwarei2cslave.o(.text._ZN16HardwareI2cSlaveD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HardwareI2cSlave::~HardwareI2cSlave() &rArr; Stream::~Stream__sub_object() &rArr; Print::~Print__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::~Stream__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2cSlave::~HardwareI2cSlave__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> hardwarei2cslave.o(.text.__cxx_global_var_init)
<LI> hardwarei2cslave.o(.rodata._ZTV16HardwareI2cSlave)
</UL>
<P><STRONG><a name="[278]"></a>HardwareI2cSlave::~HardwareI2cSlave__sub_object()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hardwarei2cslave.o(.text._ZN16HardwareI2cSlaveD2Ev), UNUSED)

<P><STRONG><a name="[c9]"></a>Print::availableForWrite()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, print.o(.text._ZN5Print17availableForWriteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Print::availableForWrite()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> print.o(.rodata._ZTV5Print)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
</UL>
<P><STRONG><a name="[ca]"></a>Print::flush()</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, print.o(.text._ZN5Print5flushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Print::flush()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print.o(.rodata._ZTV5Print)
</UL>
<P><STRONG><a name="[1f5]"></a>Print::print(char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, print.o(.text._ZN5Print5printEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[b9]"></a>Print::write(unsigned char const*, unsigned int)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, print.o(.text._ZN5Print5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Print::write(unsigned char const*, unsigned int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> hardwareserial.o(.rodata._ZTV14HardwareSerial)
<LI> print.o(.rodata._ZTV5Print)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
<LI> hardwarei2cslave.o(.rodata._ZTV16HardwareI2cSlave)
</UL>
<P><STRONG><a name="[1ad]"></a>Print::Print__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, hardwareserial.o(.text._ZN5PrintC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Print::Print__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::Stream__sub_object()
</UL>

<P><STRONG><a name="[c7]"></a>Print::~Print__deallocating()</STRONG> (Thumb, 6 bytes, Stack size 4 bytes, print.o(.text._ZN5PrintD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Print::~Print__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print.o(.rodata._ZTV5Print)
</UL>
<P><STRONG><a name="[c6]"></a>Print::~Print__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, print.o(.text._ZN5PrintD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Print::~Print__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print.o(.rodata._ZTV5Print)
</UL>
<P><STRONG><a name="[1a9]"></a>Stream::Stream__sub_object()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hardwareserial.o(.text._ZN6StreamC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Stream::Stream__sub_object() &rArr; Print::Print__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::Print__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::HardwareSerial(usart_config_t*, short, short)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2cSlave::HardwareI2cSlave()
</UL>

<P><STRONG><a name="[cc]"></a>Stream::~Stream__deallocating()</STRONG> (Thumb, 6 bytes, Stack size 4 bytes, hardwareserial.o(.text._ZN6StreamD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Stream::~Stream__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.rodata._ZTV6Stream)
</UL>
<P><STRONG><a name="[cb]"></a>Stream::~Stream__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, hardwareserial.o(.text._ZN6StreamD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Stream::~Stream__sub_object() &rArr; Print::~Print__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::~Print__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::~HardwareSerial()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2cSlave::~HardwareI2cSlave()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.rodata._ZTV6Stream)
</UL>
<P><STRONG><a name="[1ae]"></a>BQ40Z50::isConnected()</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bq40z50.o(.text._ZN7BQ40Z5011isConnectedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = BQ40Z50::isConnected() &rArr; TwoWire::beginTransmission(unsigned char) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ40Z50::begin(TwoWire&)
</UL>

<P><STRONG><a name="[1b1]"></a>BQ40Z50::begin(TwoWire&)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bq40z50.o(.text._ZN7BQ40Z505beginER7TwoWire))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = BQ40Z50::begin(TwoWire&) &rArr; BQ40Z50::isConnected() &rArr; TwoWire::beginTransmission(unsigned char) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ40Z50::isConnected()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1d9]"></a>BQ40Z50::BQ40Z50__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(.text._ZN7BQ40Z50C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BQ40Z50::BQ40Z50__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1b2]"></a>MP2762A::isConnected()</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mp2762a.o(.text._ZN7MP2762A11isConnectedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = MP2762A::isConnected() &rArr; TwoWire::beginTransmission(unsigned char) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::begin(TwoWire&)
</UL>

<P><STRONG><a name="[1b3]"></a>MP2762A::readRegister8(unsigned char)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, mp2762a.o(.text._ZN7MP2762A13readRegister8Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = MP2762A::readRegister8(unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(unsigned char)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(bool)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char*, unsigned int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::setFastChargeVoltageMv(unsigned short)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::setPrechargeCurrentMa(unsigned short)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::getChargeStatus()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::registerReset()
</UL>

<P><STRONG><a name="[1b6]"></a>MP2762A::registerReset()</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mp2762a.o(.text._ZN7MP2762A13registerResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = MP2762A::registerReset() &rArr; MP2762A::readRegister8(unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::writeRegister8(unsigned char, unsigned char)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::readRegister8(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1b7]"></a>MP2762A::writeRegister8(unsigned char, unsigned char)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, mp2762a.o(.text._ZN7MP2762A14writeRegister8Ehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = MP2762A::writeRegister8(unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(unsigned char const*, unsigned int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::setFastChargeVoltageMv(unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::setFastChargeCurrentMa(unsigned short)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::setPrechargeCurrentMa(unsigned short)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::registerReset()
</UL>

<P><STRONG><a name="[1b9]"></a>MP2762A::getChargeStatus()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mp2762a.o(.text._ZN7MP2762A15getChargeStatusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = MP2762A::getChargeStatus() &rArr; MP2762A::readRegister8(unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::readRegister8(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1ba]"></a>MP2762A::setPrechargeCurrentMa(unsigned short)</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, mp2762a.o(.text._ZN7MP2762A21setPrechargeCurrentMaEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = MP2762A::setPrechargeCurrentMa(unsigned short) &rArr; MP2762A::readRegister8(unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::writeRegister8(unsigned char, unsigned char)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::readRegister8(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1bb]"></a>MP2762A::setFastChargeCurrentMa(unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mp2762a.o(.text._ZN7MP2762A22setFastChargeCurrentMaEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = MP2762A::setFastChargeCurrentMa(unsigned short) &rArr; MP2762A::writeRegister8(unsigned char, unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::writeRegister8(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1bc]"></a>MP2762A::setFastChargeVoltageMv(unsigned short)</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, mp2762a.o(.text._ZN7MP2762A22setFastChargeVoltageMvEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = MP2762A::setFastChargeVoltageMv(unsigned short) &rArr; MP2762A::readRegister8(unsigned char) &rArr; TwoWire::beginTransmission(unsigned char) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::writeRegister8(unsigned char, unsigned char)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::readRegister8(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1bd]"></a>MP2762A::begin(TwoWire&)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mp2762a.o(.text._ZN7MP2762A5beginER7TwoWire))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = MP2762A::begin(TwoWire&) &rArr; MP2762A::isConnected() &rArr; TwoWire::beginTransmission(unsigned char) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::isConnected()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1da]"></a>MP2762A::MP2762A__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(.text._ZN7MP2762AC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MP2762A::MP2762A__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1b5]"></a>TwoWire::requestFrom(unsigned char, unsigned char*, unsigned int, bool)</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, wire.o(.text._ZN7TwoWire11requestFromEhPhjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TwoWire::requestFrom(unsigned char, unsigned char*, unsigned int, bool) &rArr; I2C_MasterReceiveDataAndStop &rArr; I2C_WaitStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransAddr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceiveDataAndStop
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AckConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::readRegister8(unsigned char)
</UL>

<P><STRONG><a name="[1b0]"></a>TwoWire::endTransmission(bool)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, wire.o(.text._ZN7TwoWire15endTransmissionEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = TwoWire::endTransmission(bool) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ40Z50::isConnected()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::writeRegister8(unsigned char, unsigned char)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::readRegister8(unsigned char)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::isConnected()
</UL>

<P><STRONG><a name="[1af]"></a>TwoWire::beginTransmission(unsigned char)</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, wire.o(.text._ZN7TwoWire17beginTransmissionEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = TwoWire::beginTransmission(unsigned char) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransAddr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SWResetCmd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ40Z50::isConnected()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::writeRegister8(unsigned char, unsigned char)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::readRegister8(unsigned char)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::isConnected()
</UL>

<P><STRONG><a name="[1be]"></a>TwoWire::begin()</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, wire.o(.text._ZN7TwoWire5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = TwoWire::begin() &rArr; GPIO_SetFunction &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunction
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg1PeriphClockCmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_StructInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BusWaitCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1b8]"></a>TwoWire::write(unsigned char const*, unsigned int)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, wire.o(.text._ZN7TwoWire5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TwoWire::write(unsigned char const*, unsigned int) &rArr; I2C_TransData &rArr; I2C_WaitStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::writeRegister8(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1b4]"></a>TwoWire::write(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wire.o(.text._ZN7TwoWire5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TwoWire::write(unsigned char) &rArr; I2C_TransData &rArr; I2C_WaitStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::readRegister8(unsigned char)
</UL>

<P><STRONG><a name="[1c4]"></a>TwoWire::TwoWire(i2c_peripheral_config_t*, short, short, unsigned int)</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, wire.o(.text._ZN7TwoWireC2EP23i2c_peripheral_config_tssj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TwoWire::TwoWire(i2c_peripheral_config_t*, short, short, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[279]"></a>TwoWire::TwoWire__sub_object(i2c_peripheral_config_t*, short, short, unsigned int)</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, wire.o(.text._ZN7TwoWireC2EP23i2c_peripheral_config_tssj), UNUSED)

<P><STRONG><a name="[12b]"></a>pin_info_t::bit_mask() const</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, wiring_digital.o(.text._ZNK10pin_info_t8bit_maskEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pin_info_t::bit_mask() const
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunction
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GPIO_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetBit
</UL>

<P><STRONG><a name="[1df]"></a>pin_adc_info_t::get_device() const</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, wiring_digital.o(.text._ZNK14pin_adc_info_t10get_deviceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pin_adc_info_t::get_device() const
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[1c0]"></a>std::__terminate(void (*)())</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt11__terminatePFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = std::__terminate(void (*)()) &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[1c2]"></a>std::get_new_handler()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt15get_new_handlerv))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>

<P><STRONG><a name="[11]"></a>std::terminate()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt9terminatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; std::__terminate(void (*)()) &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void (*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_default_handlers.cpp.o(.data.__cxa_unexpected_handler)
</UL>
<P><STRONG><a name="[1a0]"></a>operator delete[](void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdaPv))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::~RingBuffer__sub_object()
</UL>

<P><STRONG><a name="[1aa]"></a>operator delete(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::~HardwareSerial()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::~HardwareSerial__deallocating()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2cSlave::~HardwareI2cSlave__deallocating()
</UL>

<P><STRONG><a name="[1a4]"></a>operator new(unsigned int)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, new.cpp.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(stc_usart_uart_init_t const*, bool)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[c8]"></a>__cxa_pure_virtual</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 2]<UL><LI> print.o(.rodata._ZTV5Print)
<LI> hardwareserial.o(.rodata._ZTV6Stream)
</UL>
<P><STRONG><a name="[208]"></a>__rt_ffs</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, kservice.o(.text.__rt_ffs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[1c5]"></a>_irqn_aa_get</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, irqn.o(.text._irqn_aa_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _irqn_aa_get &rArr; irqn_bitfield_next(unsigned int&) &rArr; irqn_bitfield_get(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_bitfield_index_to_irqn(unsigned int)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_bitfield_next(unsigned int&)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_bitfield_set(unsigned int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_aa_get
</UL>

<P><STRONG><a name="[1c1]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void (*)())
</UL>

<P><STRONG><a name="[189]"></a>adc_device_init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, adc.o(.text.adc_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = adc_device_init &rArr; adc_adc_init(adc_device_t const*) &rArr; adc_clock_init(bool) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_init(adc_device_t const*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit()
</UL>

<P><STRONG><a name="[1d2]"></a>adc_disable_channel</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, adc.o(.text.adc_disable_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = adc_disable_channel &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[18a]"></a>adc_enable_channel</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, adc.o(.text.adc_enable_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = adc_enable_channel &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_to_mask(adc_device_t const*, unsigned char)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSampleTime
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConvDataAverageConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConvDataAverageChCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChCmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit()
</UL>

<P><STRONG><a name="[1d4]"></a>clock_init</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, sysclock.o(.text.clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = clock_init &rArr; CLK_PLLInit &rArr; CLK_PLLCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_system_clock_frequencies
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetWaitCycle
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_HighSpeedToHighPerformance
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetReadWaitCycle
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AnalogCmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetWaitCycle
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_CacheRamReset
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_CacheCmd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalStructInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClockSrc
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLStructInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetStableStatus
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1ab]"></a>delay_ms</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, clock.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2cSlave::write(unsigned char)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[15f]"></a>delay_us</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, clock.o(.text.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_HighSpeedToHighPerformance
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockSrc
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockDiv
</UL>

<P><STRONG><a name="[174]"></a>digitalRead</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wiring_digital.o(.text.digitalRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = digitalRead &rArr; GPIO_GetBit &rArr; GPIO_ReadInputPins &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMonitor(void*)
</UL>

<P><STRONG><a name="[17b]"></a>digitalWrite</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wiring_digital.o(.text.digitalWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = digitalWrite &rArr; GPIO_SetBits &rArr; GPIO_SetPins &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionKeyLedUpdate()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerLedUpdate()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLedUpdate()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GnssLedUpdate()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataLedUpdate()
</UL>

<P><STRONG><a name="[182]"></a>irqn_aa_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, irqn.o(.text.irqn_aa_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = irqn_aa_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_irqn_aa_get
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_irq_register(usart_interrupt_config_t&, char const*, unsigned int)
</UL>

<P><STRONG><a name="[1d8]"></a>$Super$$main</STRONG> (Thumb, 542 bytes, Stack size 80 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = $Super$$main &rArr; keyInit() &rArr; pinMode &rArr; adc_device_init &rArr; adc_adc_init(adc_device_t const*) &rArr; adc_clock_init(bool) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::MP2762A__sub_object()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::begin(TwoWire&)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::setFastChargeVoltageMv(unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::setFastChargeCurrentMa(unsigned short)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::setPrechargeCurrentMa(unsigned short)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::getChargeStatus()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::registerReset()
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ40Z50::BQ40Z50__sub_object()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BQ40Z50::begin(TwoWire&)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyInit()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[b5]"></a>main_thread_entry</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, components.o(.text.main_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = main_thread_entry &rArr; $Super$$main &rArr; keyInit() &rArr; pinMode &rArr; adc_device_init &rArr; adc_adc_init(adc_device_t const*) &rArr; adc_clock_init(bool) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> components.o(.text.rt_application_init)
</UL>
<P><STRONG><a name="[17a]"></a>millis</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock.o(.text.millis))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnhancedButton::update(bool)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionKeyLedUpdate()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargerLedUpdate()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLedUpdate()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GnssLedUpdate()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataLedUpdate()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledStatusUpdateTask(void*)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnhancedButton::getTickElapsed(unsigned int)
</UL>

<P><STRONG><a name="[18c]"></a>pinMode</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, wiring_digital.o(.text.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = pinMode &rArr; adc_device_init &rArr; adc_adc_init(adc_device_t const*) &rArr; adc_clock_init(bool) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_disable_channel
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_adc_info_t::get_device() const
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GPIO_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_channel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyInit()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1e3]"></a>rt_application_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, components.o(.text.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1ef]"></a>rt_components_board_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, components.o(.text.rt_components_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1de]"></a>rt_components_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, components.o(.text.rt_components_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_thread_entry
</UL>

<P><STRONG><a name="[1e5]"></a>rt_enter_critical</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, scheduler.o(.text.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[1e6]"></a>rt_exit_critical</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, scheduler.o(.text.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[1e8]"></a>rt_free</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, mem.o(.text.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[1f0]"></a>rt_heap_begin_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board.o(.text.rt_heap_begin_get))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1f1]"></a>rt_heap_end_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(.text.rt_heap_end_get))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[1ec]"></a>rt_hw_board_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, board.o(.text.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = rt_hw_board_init &rArr; usart_init &rArr; HardwareSerial::begin(unsigned int) &rArr; HardwareSerial::begin(unsigned int, unsigned short) &rArr; HardwareSerial::begin(stc_usart_uart_init_t const*, bool) &rArr; usart_irq_register(usart_interrupt_config_t&, char const*, unsigned int) &rArr; irqn_aa_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_end_get
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_heap_begin_get
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysTick_Config
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1f3]"></a>rt_hw_console_output</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, usart.o(.text.rt_hw_console_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_hw_console_output &rArr; Print::print(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[f5]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, cpuport.o(.text.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[1cb]"></a>rt_hw_stack_init</STRONG> (Thumb, 124 bytes, Stack size 28 bytes, cpuport.o(.text.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[162]"></a>rt_interrupt_enter</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, irq.o(.text.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[164]"></a>rt_interrupt_leave</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, irq.o(.text.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[133]"></a>rt_kprintf</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, kservice.o(.text.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irqn_aa_get
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(stc_usart_uart_init_t const*, bool)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::read()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunction
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_clock_init(bool)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_disable_channel
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_channel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_device_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttonEventCallback(EnhancedButton*, EnhancedButton::Event_t)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledStatusUpdateTask(void*)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMonitor(void*)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(bool)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2cSlave::read()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::writeRegister8(unsigned char, unsigned char)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP2762A::readRegister8(unsigned char)
</UL>

<P><STRONG><a name="[1ff]"></a>rt_malloc</STRONG> (Thumb, 650 bytes, Stack size 40 bytes, mem.o(.text.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[1ca]"></a>rt_memset</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, kservice.o(.text.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[200]"></a>rt_object_allocate</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, object.o(.text.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[204]"></a>rt_object_delete</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, object.o(.text.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[206]"></a>rt_object_detach</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, object.o(.text.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_object_detach &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[201]"></a>rt_object_get_information</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, object.o(.text.rt_object_get_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_object_get_information
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[207]"></a>rt_object_init</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, object.o(.text.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_get_information
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>

<P><STRONG><a name="[219]"></a>rt_object_is_systemobject</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, object.o(.text.rt_object_is_systemobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_object_is_systemobject
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1e7]"></a>rt_schedule</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, scheduler.o(.text.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>

<P><STRONG><a name="[209]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, scheduler.o(.text.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_list_insert_before
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[20b]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, scheduler.o(.text.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
</UL>

<P><STRONG><a name="[20e]"></a>rt_sem_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ipc.o(.text.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
</UL>

<P><STRONG><a name="[1eb]"></a>rt_sem_release</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ipc.o(.text.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = rt_sem_release &rArr; rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[1e9]"></a>rt_sem_take</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, ipc.o(.text.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = rt_sem_take &rArr; rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[212]"></a>rt_show_version</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, kservice.o(.text.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1f4]"></a>rt_strlen</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(.text.rt_strlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
</UL>

<P><STRONG><a name="[202]"></a>rt_strncpy</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, kservice.o(.text.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[1f2]"></a>rt_system_heap_init</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, mem.o(.text.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_system_heap_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[213]"></a>rt_system_scheduler_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, scheduler.o(.text.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_system_scheduler_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[215]"></a>rt_system_scheduler_start</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, scheduler.o(.text.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_system_scheduler_start &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[216]"></a>rt_system_timer_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timer.o(.text.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_system_timer_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[229]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(.text.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1e4]"></a>rt_thread_create</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, thread.o(.text.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rt_thread_create &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[1dd]"></a>rt_thread_delay</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[b1]"></a>rt_thread_exit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_thread_exit &rArr; rt_timer_detach &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_thread_cleanup_execute
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._rt_thread_init)
</UL>
<P><STRONG><a name="[21b]"></a>rt_thread_idle_excute</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, idle.o(.text.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[de]"></a>rt_thread_idle_gethandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, idle.o(.text.rt_thread_idle_gethandler), UNUSED, KEPT)

<P><STRONG><a name="[21e]"></a>rt_thread_idle_init</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, idle.o(.text.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1db]"></a>rt_thread_init</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, thread.o(.text.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[176]"></a>rt_thread_mdelay</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = rt_thread_mdelay &rArr; rt_thread_sleep &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledStatusUpdateTask(void*)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMonitor(void*)
</UL>

<P><STRONG><a name="[1f8]"></a>rt_thread_resume</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>

<P><STRONG><a name="[1f6]"></a>rt_thread_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, thread.o(.text.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[217]"></a>rt_thread_sleep</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = rt_thread_sleep &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[1dc]"></a>rt_thread_startup</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1fa]"></a>rt_thread_suspend</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[b2]"></a>rt_thread_timeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, thread.o(.text.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._rt_thread_init)
</UL>
<P><STRONG><a name="[222]"></a>rt_thread_yield</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, thread.o(.text.rt_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_yield &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[21f]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, clock.o(.text.rt_tick_from_millisecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_tick_from_millisecond
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_mdelay
</UL>

<P><STRONG><a name="[225]"></a>rt_tick_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clock.o(.text.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[163]"></a>rt_tick_increase</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, clock.o(.text.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[224]"></a>rt_timer_check</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, timer.o(.text.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[210]"></a>rt_timer_control</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, timer.o(.text.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_timer_control
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[218]"></a>rt_timer_detach</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timer.o(.text.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_timer_detach &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1cc]"></a>rt_timer_init</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, timer.o(.text.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[211]"></a>rt_timer_start</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, timer.o(.text.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rt_timer_start &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[221]"></a>rt_timer_stop</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, timer.o(.text.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[1fe]"></a>rt_vsnprintf</STRONG> (Thumb, 1480 bytes, Stack size 96 bytes, kservice.o(.text.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[107]"></a>rtthread_startup</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, components.o(.text.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = rtthread_startup &rArr; rt_hw_board_init &rArr; usart_init &rArr; HardwareSerial::begin(unsigned int) &rArr; HardwareSerial::begin(unsigned int, unsigned short) &rArr; HardwareSerial::begin(stc_usart_uart_init_t const*, bool) &rArr; usart_irq_register(usart_interrupt_config_t&, char const*, unsigned int) &rArr; irqn_aa_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d7]"></a>update_system_clock_frequencies</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, sysclock.o(.text.update_system_clock_frequencies))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = update_system_clock_frequencies &rArr; CLK_GetClockFreq &rArr; GetClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_init
</UL>

<P><STRONG><a name="[1ee]"></a>usart_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usart.o(.text.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = usart_init &rArr; HardwareSerial::begin(unsigned int) &rArr; HardwareSerial::begin(unsigned int, unsigned short) &rArr; HardwareSerial::begin(stc_usart_uart_init_t const*, bool) &rArr; usart_irq_register(usart_interrupt_config_t&, char const*, unsigned int) &rArr; irqn_aa_get &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[121]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
</UL>

<P><STRONG><a name="[22a]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
</UL>

<P><STRONG><a name="[22d]"></a>_ddiv</STRONG> (Thumb, 556 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[123]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
</UL>

<P><STRONG><a name="[27a]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[11f]"></a>__aeabi_ul2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
</UL>

<P><STRONG><a name="[27b]"></a>_ll_uto_d</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull), UNUSED)

<P><STRONG><a name="[22c]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[22e]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BaudrateConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateBrr
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateBrr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateBrr
</UL>

<P><STRONG><a name="[22f]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[27c]"></a>__aeabi_fcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[232]"></a>_feq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[234]"></a>_fneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_fcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BaudrateConfig
</UL>

<P><STRONG><a name="[235]"></a>_fgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[27d]"></a>__aeabi_fcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[237]"></a>_fgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_fcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BaudrateConfig
</UL>

<P><STRONG><a name="[238]"></a>_fleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_fcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BaudrateConfig
</UL>

<P><STRONG><a name="[23a]"></a>_fls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[23c]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[138]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BaudrateConfig
</UL>

<P><STRONG><a name="[23b]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[27e]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)

<P><STRONG><a name="[233]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fneq
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_feq
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BaudrateConfig
</UL>

<P><STRONG><a name="[23d]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[137]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BaudrateConfig
</UL>

<P><STRONG><a name="[27f]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[236]"></a>_fcmpge</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fgeqf.o(x$fpl$fgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgeq
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgr
</UL>

<P><STRONG><a name="[280]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[239]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fls
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fleq
</UL>

<P><STRONG><a name="[281]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[231]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[22b]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BaudrateConfig
</UL>

<P><STRONG><a name="[23e]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d1]"></a>_GLOBAL__sub_I_Key.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, key.o(.text._GLOBAL__sub_I_Key.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _GLOBAL__sub_I_Key.cpp &rArr; __cxx_global_var_init &rArr; EnhancedButton::EnhancedButton(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.init_array)
</UL>
<P><STRONG><a name="[171]"></a>__cxx_global_var_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, key.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __cxx_global_var_init &rArr; EnhancedButton::EnhancedButton(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnhancedButton::EnhancedButton(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Key.cpp
</UL>

<P><STRONG><a name="[d2]"></a>_GLOBAL__sub_I_HardwareSerial.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hardwareserial.o(.text._GLOBAL__sub_I_HardwareSerial.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _GLOBAL__sub_I_HardwareSerial.cpp &rArr; __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.init_array)
</UL>
<P><STRONG><a name="[185]"></a>__NVIC_EnableIRQ(IRQn_Type)</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, hardwareserial.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ(IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_irq_register(usart_interrupt_config_t&, char const*, unsigned int)
</UL>

<P><STRONG><a name="[183]"></a>__NVIC_SetPriority(IRQn_Type, unsigned int)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hardwareserial.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority(IRQn_Type, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_irq_register(usart_interrupt_config_t&, char const*, unsigned int)
</UL>

<P><STRONG><a name="[184]"></a>__NVIC_ClearPendingIRQ(IRQn_Type)</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, hardwareserial.o(.text._ZL22__NVIC_ClearPendingIRQ9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ(IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_irq_register(usart_interrupt_config_t&, char const*, unsigned int)
</UL>

<P><STRONG><a name="[170]"></a>__cxx_global_var_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, hardwareserial.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::HardwareSerial(usart_config_t*, short, short)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_HardwareSerial.cpp
</UL>

<P><STRONG><a name="[18e]"></a>USART_rx_error_irq(unsigned char)</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, usart_config.o(.text._ZL18USART_rx_error_irqh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_rx_error_irq(unsigned char) &rArr; USART_ClearStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_rx_error_irq&lang;(unsigned char)4&rang;()
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_rx_error_irq&lang;(unsigned char)3&rang;()
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_rx_error_irq&lang;(unsigned char)2&rang;()
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_rx_error_irq&lang;(unsigned char)1&rang;()
</UL>

<P><STRONG><a name="[1]"></a>void USARTx_rx_error_irq&lang;(unsigned char)1&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL19USARTx_rx_error_irqILh1EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = void USARTx_rx_error_irq&lang;(unsigned char)1&rang;() &rArr; USART_rx_error_irq(unsigned char) &rArr; USART_ClearStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_error_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART1_config)
</UL>
<P><STRONG><a name="[5]"></a>void USARTx_rx_error_irq&lang;(unsigned char)2&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL19USARTx_rx_error_irqILh2EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = void USARTx_rx_error_irq&lang;(unsigned char)2&rang;() &rArr; USART_rx_error_irq(unsigned char) &rArr; USART_ClearStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_error_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART2_config)
</UL>
<P><STRONG><a name="[9]"></a>void USARTx_rx_error_irq&lang;(unsigned char)3&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL19USARTx_rx_error_irqILh3EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = void USARTx_rx_error_irq&lang;(unsigned char)3&rang;() &rArr; USART_rx_error_irq(unsigned char) &rArr; USART_ClearStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_error_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART3_config)
</UL>
<P><STRONG><a name="[d]"></a>void USARTx_rx_error_irq&lang;(unsigned char)4&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL19USARTx_rx_error_irqILh4EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = void USARTx_rx_error_irq&lang;(unsigned char)4&rang;() &rArr; USART_rx_error_irq(unsigned char) &rArr; USART_ClearStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_error_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART4_config)
</UL>
<P><STRONG><a name="[18f]"></a>USART_tx_complete_irq(unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usart_config.o(.text._ZL21USART_tx_complete_irqh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART_tx_complete_irq(unsigned char) &rArr; USART_FuncCmd &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_tx_complete_irq&lang;(unsigned char)4&rang;()
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_tx_complete_irq&lang;(unsigned char)3&rang;()
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_tx_complete_irq&lang;(unsigned char)2&rang;()
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_tx_complete_irq&lang;(unsigned char)1&rang;()
</UL>

<P><STRONG><a name="[3]"></a>void USARTx_tx_complete_irq&lang;(unsigned char)1&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL22USARTx_tx_complete_irqILh1EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = void USARTx_tx_complete_irq&lang;(unsigned char)1&rang;() &rArr; USART_tx_complete_irq(unsigned char) &rArr; USART_FuncCmd &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_complete_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART1_config)
</UL>
<P><STRONG><a name="[7]"></a>void USARTx_tx_complete_irq&lang;(unsigned char)2&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL22USARTx_tx_complete_irqILh2EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = void USARTx_tx_complete_irq&lang;(unsigned char)2&rang;() &rArr; USART_tx_complete_irq(unsigned char) &rArr; USART_FuncCmd &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_complete_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART2_config)
</UL>
<P><STRONG><a name="[b]"></a>void USARTx_tx_complete_irq&lang;(unsigned char)3&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL22USARTx_tx_complete_irqILh3EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = void USARTx_tx_complete_irq&lang;(unsigned char)3&rang;() &rArr; USART_tx_complete_irq(unsigned char) &rArr; USART_FuncCmd &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_complete_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART3_config)
</UL>
<P><STRONG><a name="[f]"></a>void USARTx_tx_complete_irq&lang;(unsigned char)4&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL22USARTx_tx_complete_irqILh4EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = void USARTx_tx_complete_irq&lang;(unsigned char)4&rang;() &rArr; USART_tx_complete_irq(unsigned char) &rArr; USART_FuncCmd &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_complete_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART4_config)
</UL>
<P><STRONG><a name="[190]"></a>USART_tx_buffer_empty_irq(unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, usart_config.o(.text._ZL25USART_tx_buffer_empty_irqh))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_tx_buffer_empty_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::pop(unsigned char&) &rArr; RingBuffer&lang;unsigned char&rang;::isEmpty() &rArr; RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::pop(unsigned char&)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteData
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_tx_buffer_empty_irq&lang;(unsigned char)4&rang;()
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_tx_buffer_empty_irq&lang;(unsigned char)3&rang;()
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_tx_buffer_empty_irq&lang;(unsigned char)2&rang;()
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_tx_buffer_empty_irq&lang;(unsigned char)1&rang;()
</UL>

<P><STRONG><a name="[2]"></a>void USARTx_tx_buffer_empty_irq&lang;(unsigned char)1&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL26USARTx_tx_buffer_empty_irqILh1EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = void USARTx_tx_buffer_empty_irq&lang;(unsigned char)1&rang;() &rArr; USART_tx_buffer_empty_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::pop(unsigned char&) &rArr; RingBuffer&lang;unsigned char&rang;::isEmpty() &rArr; RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_buffer_empty_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART1_config)
</UL>
<P><STRONG><a name="[6]"></a>void USARTx_tx_buffer_empty_irq&lang;(unsigned char)2&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL26USARTx_tx_buffer_empty_irqILh2EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = void USARTx_tx_buffer_empty_irq&lang;(unsigned char)2&rang;() &rArr; USART_tx_buffer_empty_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::pop(unsigned char&) &rArr; RingBuffer&lang;unsigned char&rang;::isEmpty() &rArr; RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_buffer_empty_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART2_config)
</UL>
<P><STRONG><a name="[a]"></a>void USARTx_tx_buffer_empty_irq&lang;(unsigned char)3&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL26USARTx_tx_buffer_empty_irqILh3EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = void USARTx_tx_buffer_empty_irq&lang;(unsigned char)3&rang;() &rArr; USART_tx_buffer_empty_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::pop(unsigned char&) &rArr; RingBuffer&lang;unsigned char&rang;::isEmpty() &rArr; RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_buffer_empty_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART3_config)
</UL>
<P><STRONG><a name="[e]"></a>void USARTx_tx_buffer_empty_irq&lang;(unsigned char)4&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL26USARTx_tx_buffer_empty_irqILh4EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = void USARTx_tx_buffer_empty_irq&lang;(unsigned char)4&rang;() &rArr; USART_tx_buffer_empty_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::pop(unsigned char&) &rArr; RingBuffer&lang;unsigned char&rang;::isEmpty() &rArr; RingBuffer&lang;unsigned char&rang;::count()
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_tx_buffer_empty_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART4_config)
</UL>
<P><STRONG><a name="[192]"></a>USART_rx_data_available_irq(unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usart_config.o(.text._ZL27USART_rx_data_available_irqh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART_rx_data_available_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&) &rArr; RingBuffer&lang;unsigned char&rang;::_push(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::_update_write_index(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_rx_data_available_irq&lang;(unsigned char)4&rang;()
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_rx_data_available_irq&lang;(unsigned char)3&rang;()
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_rx_data_available_irq&lang;(unsigned char)2&rang;()
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USARTx_rx_data_available_irq&lang;(unsigned char)1&rang;()
</UL>

<P><STRONG><a name="[0]"></a>void USARTx_rx_data_available_irq&lang;(unsigned char)1&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL28USARTx_rx_data_available_irqILh1EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = void USARTx_rx_data_available_irq&lang;(unsigned char)1&rang;() &rArr; USART_rx_data_available_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&) &rArr; RingBuffer&lang;unsigned char&rang;::_push(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::_update_write_index(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_data_available_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART1_config)
</UL>
<P><STRONG><a name="[4]"></a>void USARTx_rx_data_available_irq&lang;(unsigned char)2&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL28USARTx_rx_data_available_irqILh2EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = void USARTx_rx_data_available_irq&lang;(unsigned char)2&rang;() &rArr; USART_rx_data_available_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&) &rArr; RingBuffer&lang;unsigned char&rang;::_push(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::_update_write_index(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_data_available_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART2_config)
</UL>
<P><STRONG><a name="[8]"></a>void USARTx_rx_data_available_irq&lang;(unsigned char)3&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL28USARTx_rx_data_available_irqILh3EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = void USARTx_rx_data_available_irq&lang;(unsigned char)3&rang;() &rArr; USART_rx_data_available_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&) &rArr; RingBuffer&lang;unsigned char&rang;::_push(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::_update_write_index(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_data_available_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART3_config)
</UL>
<P><STRONG><a name="[c]"></a>void USARTx_rx_data_available_irq&lang;(unsigned char)4&rang;()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_config.o(.text._ZL28USARTx_rx_data_available_irqILh4EEvv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = void USARTx_rx_data_available_irq&lang;(unsigned char)4&rang;() &rArr; USART_rx_data_available_irq(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::push(unsigned char, bool, bool&) &rArr; RingBuffer&lang;unsigned char&rang;::_push(unsigned char) &rArr; RingBuffer&lang;unsigned char&rang;::_update_write_index(unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_rx_data_available_irq(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_config.o(.data.USART4_config)
</UL>
<P><STRONG><a name="[d3]"></a>_GLOBAL__sub_I_Wire.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wire.o(.text._GLOBAL__sub_I_Wire.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _GLOBAL__sub_I_Wire.cpp &rArr; __cxx_global_var_init &rArr; TwoWire::TwoWire(i2c_peripheral_config_t*, short, short, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.init_array)
</UL>
<P><STRONG><a name="[172]"></a>__cxx_global_var_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wire.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __cxx_global_var_init &rArr; TwoWire::TwoWire(i2c_peripheral_config_t*, short, short, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::TwoWire(i2c_peripheral_config_t*, short, short, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Wire.cpp
</UL>

<P><STRONG><a name="[159]"></a>EFM_REG_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32_ll.o(.text.EFM_REG_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
</UL>

<P><STRONG><a name="[153]"></a>EFM_REG_Unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hc32_ll.o(.text.EFM_REG_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
</UL>

<P><STRONG><a name="[15b]"></a>GPIO_REG_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32_ll.o(.text.GPIO_REG_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
</UL>

<P><STRONG><a name="[155]"></a>GPIO_REG_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32_ll.o(.text.GPIO_REG_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
</UL>

<P><STRONG><a name="[15a]"></a>PWC_FCG0_REG_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32_ll.o(.text.PWC_FCG0_REG_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
</UL>

<P><STRONG><a name="[154]"></a>PWC_FCG0_REG_Unlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32_ll.o(.text.PWC_FCG0_REG_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
</UL>

<P><STRONG><a name="[15c]"></a>PWC_REG_Lock</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hc32_ll.o(.text.PWC_REG_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PWC_REG_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
</UL>

<P><STRONG><a name="[156]"></a>PWC_REG_Unlock</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, hc32_ll.o(.text.PWC_REG_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PWC_REG_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
</UL>

<P><STRONG><a name="[15d]"></a>SRAM_REG_Lock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hc32_ll.o(.text.SRAM_REG_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
</UL>

<P><STRONG><a name="[157]"></a>SRAM_REG_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hc32_ll.o(.text.SRAM_REG_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
</UL>

<P><STRONG><a name="[113]"></a>CLK_WaitStable</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, hc32_ll_clk.o(.text.CLK_WaitStable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_WaitStable &rArr; CLK_GetStableStatus &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetStableStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLCmd
</UL>

<P><STRONG><a name="[110]"></a>GetClockFreq</STRONG> (Thumb, 376 bytes, Stack size 20 bytes, hc32_ll_clk.o(.text.GetClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetClockFreq
</UL>

<P><STRONG><a name="[116]"></a>SetSysClockDiv</STRONG> (Thumb, 1174 bytes, Stack size 40 bytes, hc32_ll_clk.o(.text.SetSysClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SetSysClockDiv &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
</UL>

<P><STRONG><a name="[11a]"></a>SetSysClockSrc</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, hc32_ll_clk.o(.text.SetSysClockSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SetSysClockSrc &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClockSrc
</UL>

<P><STRONG><a name="[11d]"></a>ClockSync_CalculateBrr</STRONG> (Thumb, 568 bytes, Stack size 88 bytes, hc32_ll_usart.o(.text.ClockSync_CalculateBrr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ClockSync_CalculateBrr &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[161]"></a>SmartCard_CalculateBrr</STRONG> (Thumb, 708 bytes, Stack size 112 bytes, hc32_ll_usart.o(.text.SmartCard_CalculateBrr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SmartCard_CalculateBrr &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[165]"></a>UART_CalculateBrr</STRONG> (Thumb, 680 bytes, Stack size 104 bytes, hc32_ll_usart.o(.text.UART_CalculateBrr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_CalculateBrr &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[16a]"></a>USART_GetBusClockFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hc32_ll_usart.o(.text.USART_GetBusClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetBusClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetUsartClockFreq
</UL>

<P><STRONG><a name="[169]"></a>USART_GetUsartClockFreq</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, hc32_ll_usart.o(.text.USART_GetUsartClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_GetUsartClockFreq &rArr; DDL_AssertHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetBusClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[d4]"></a>_GLOBAL__sub_I_HardwareI2cSlave.cpp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hardwarei2cslave.o(.text._GLOBAL__sub_I_HardwareI2cSlave.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _GLOBAL__sub_I_HardwareI2cSlave.cpp &rArr; __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwarei2cslave.o(.init_array)
</UL>
<P><STRONG><a name="[16f]"></a>__cxx_global_var_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hardwarei2cslave.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxx_global_var_init &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareI2cSlave::HardwareI2cSlave()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_HardwareI2cSlave.cpp
</UL>

<P><STRONG><a name="[cf]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[ce]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_board_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[d0]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_end))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[cd]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text.rti_start))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[21c]"></a>_has_defunct_thread</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, idle.o(.text._has_defunct_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _has_defunct_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[21d]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, idle.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[b6]"></a>rt_thread_idle_entry</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, idle.o(.text.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[1f7]"></a>rt_ipc_list_resume</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ipc.o(.text.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[1f9]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ipc.o(.text.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[1fc]"></a>rt_ipc_object_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ipc.o(.text.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_ipc_object_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>

<P><STRONG><a name="[1fd]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ipc.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[1fb]"></a>rt_list_insert_before</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ipc.o(.text.rt_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[20f]"></a>rt_list_isempty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, ipc.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[1e2]"></a>divide</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, kservice.o(.text.divide))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = divide
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[1e1]"></a>print_number</STRONG> (Thumb, 612 bytes, Stack size 72 bytes, kservice.o(.text.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = print_number &rArr; divide
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divide
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[228]"></a>skip_atoi</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, kservice.o(.text.skip_atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = skip_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[1ea]"></a>plug_holes</STRONG> (Thumb, 226 bytes, Stack size 12 bytes, mem.o(.text.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[203]"></a>rt_list_insert_after</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, object.o(.text.rt_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
</UL>

<P><STRONG><a name="[205]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, object.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
</UL>

<P><STRONG><a name="[214]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, scheduler.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[20a]"></a>rt_list_insert_before</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, scheduler.o(.text.rt_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>

<P><STRONG><a name="[20d]"></a>rt_list_isempty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, scheduler.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>

<P><STRONG><a name="[20c]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, scheduler.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>

<P><STRONG><a name="[1c8]"></a>_rt_thread_init</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, thread.o(.text._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_exit_critical &rArr; rt_schedule &rArr; __rt_ffs
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[1d1]"></a>_thread_cleanup_execute</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, thread.o(.text._thread_cleanup_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _thread_cleanup_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1c9]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, thread.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[21a]"></a>rt_list_insert_after</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, thread.o(.text.rt_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[223]"></a>rt_list_insert_before</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, thread.o(.text.rt_list_insert_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>

<P><STRONG><a name="[220]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, thread.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>

<P><STRONG><a name="[1cd]"></a>_rt_timer_init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, timer.o(.text._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _rt_timer_init &rArr; rt_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[1cf]"></a>_rt_timer_remove</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timer.o(.text._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _rt_timer_remove &rArr; rt_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[1ce]"></a>rt_list_init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, timer.o(.text.rt_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[227]"></a>rt_list_insert_after</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(.text.rt_list_insert_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[226]"></a>rt_list_isempty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, timer.o(.text.rt_list_isempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[1d0]"></a>rt_list_remove</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, timer.o(.text.rt_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[1ed]"></a>_SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, board.o(.text._SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[23f]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[230]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
